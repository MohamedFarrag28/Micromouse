
MicroMouseFinal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  000012d8  0000136c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003d  0080011e  0080011e  0000138a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000138a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  000013fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002fde  00000000  00000000  00001694  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ed2  00000000  00000000  00004672  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001785  00000000  00000000  00005544  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a14  00000000  00000000  00006ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001446  00000000  00000000  000076e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f9e  00000000  00000000  00008b26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  0000bac4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_1>
       8:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__vector_2>
       c:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__vector_3>
      10:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__vector_4>
      14:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 66 05 	jmp	0xacc	; 0xacc <__vector_7>
      20:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <__vector_8>
      24:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__vector_14>
      3c:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <__vector_15>
      40:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 ed       	ldi	r30, 0xD8	; 216
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 31       	cpi	r26, 0x1E	; 30
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ae e1       	ldi	r26, 0x1E	; 30
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 35       	cpi	r26, 0x5B	; 91
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 a0 02 	call	0x540	; 0x540 <main>
      9e:	0c 94 6a 09 	jmp	0x12d4	; 0x12d4 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <MADC_void_Initialize>:
void MADC_void_DisableDigitalInputBuffer ( enum ADC_CHANNEL Channel )
{
	if (Channel>5)
	return;
	
	SET_BIT(ADC_REG->ADC_DIDR0,Channel);
      a6:	20 93 1f 01 	sts	0x011F, r18	; 0x80011f <PADC_Conversion_Resolution>
      aa:	e8 e7       	ldi	r30, 0x78	; 120
      ac:	f0 e0       	ldi	r31, 0x00	; 0
      ae:	14 82       	std	Z+4, r1	; 0x04
      b0:	a4 81       	ldd	r26, Z+4	; 0x04
      b2:	90 e4       	ldi	r25, 0x40	; 64
      b4:	69 9f       	mul	r22, r25
      b6:	b0 01       	movw	r22, r0
      b8:	11 24       	eor	r1, r1
      ba:	6a 2b       	or	r22, r26
      bc:	90 e2       	ldi	r25, 0x20	; 32
      be:	29 9f       	mul	r18, r25
      c0:	d0 01       	movw	r26, r0
      c2:	11 24       	eor	r1, r1
      c4:	a6 2b       	or	r26, r22
      c6:	a4 83       	std	Z+4, r26	; 0x04
      c8:	12 82       	std	Z+2, r1	; 0x02
      ca:	92 81       	ldd	r25, Z+2	; 0x02
      cc:	28 2f       	mov	r18, r24
      ce:	30 e0       	ldi	r19, 0x00	; 0
      d0:	b9 01       	movw	r22, r18
      d2:	66 0f       	add	r22, r22
      d4:	77 1f       	adc	r23, r23
      d6:	62 95       	swap	r22
      d8:	72 95       	swap	r23
      da:	70 7f       	andi	r23, 0xF0	; 240
      dc:	76 27       	eor	r23, r22
      de:	60 7f       	andi	r22, 0xF0	; 240
      e0:	76 27       	eor	r23, r22
      e2:	49 2b       	or	r20, r25
      e4:	64 2b       	or	r22, r20
      e6:	22 0f       	add	r18, r18
      e8:	33 1f       	adc	r19, r19
      ea:	22 0f       	add	r18, r18
      ec:	33 1f       	adc	r19, r19
      ee:	22 0f       	add	r18, r18
      f0:	33 1f       	adc	r19, r19
      f2:	26 2b       	or	r18, r22
      f4:	22 83       	std	Z+2, r18	; 0x02
      f6:	81 30       	cpi	r24, 0x01	; 1
      f8:	19 f4       	brne	.+6      	; 0x100 <MADC_void_Initialize+0x5a>
      fa:	8f b7       	in	r24, 0x3f	; 63
      fc:	80 68       	ori	r24, 0x80	; 128
      fe:	8f bf       	out	0x3f, r24	; 63
     100:	08 95       	ret

00000102 <MADC_u16_ReadChannelSynch>:
     102:	e8 e7       	ldi	r30, 0x78	; 120
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	92 81       	ldd	r25, Z+2	; 0x02
     108:	90 68       	ori	r25, 0x80	; 128
     10a:	92 83       	std	Z+2, r25	; 0x02
     10c:	94 81       	ldd	r25, Z+4	; 0x04
     10e:	90 7f       	andi	r25, 0xF0	; 240
     110:	94 83       	std	Z+4, r25	; 0x04
     112:	94 81       	ldd	r25, Z+4	; 0x04
     114:	89 2b       	or	r24, r25
     116:	84 83       	std	Z+4, r24	; 0x04
     118:	82 81       	ldd	r24, Z+2	; 0x02
     11a:	80 64       	ori	r24, 0x40	; 64
     11c:	82 83       	std	Z+2, r24	; 0x02
     11e:	82 81       	ldd	r24, Z+2	; 0x02
     120:	84 ff       	sbrs	r24, 4
     122:	fd cf       	rjmp	.-6      	; 0x11e <MADC_u16_ReadChannelSynch+0x1c>
     124:	e8 e7       	ldi	r30, 0x78	; 120
     126:	f0 e0       	ldi	r31, 0x00	; 0
     128:	82 81       	ldd	r24, Z+2	; 0x02
     12a:	80 61       	ori	r24, 0x10	; 16
     12c:	82 83       	std	Z+2, r24	; 0x02
     12e:	82 81       	ldd	r24, Z+2	; 0x02
     130:	8f 77       	andi	r24, 0x7F	; 127
     132:	82 83       	std	Z+2, r24	; 0x02
     134:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <PADC_Conversion_Resolution>
     138:	81 30       	cpi	r24, 0x01	; 1
     13a:	21 f4       	brne	.+8      	; 0x144 <MADC_u16_ReadChannelSynch+0x42>
     13c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	08 95       	ret
     144:	e8 e7       	ldi	r30, 0x78	; 120
     146:	f0 e0       	ldi	r31, 0x00	; 0
     148:	80 81       	ld	r24, Z
     14a:	21 81       	ldd	r18, Z+1	; 0x01
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	92 2b       	or	r25, r18
     150:	08 95       	ret

00000152 <__vector_21>:
	
}

void ADC_VECTOR_ISR_ADC (void)
{
     152:	1f 92       	push	r1
     154:	0f 92       	push	r0
     156:	0f b6       	in	r0, 0x3f	; 63
     158:	0f 92       	push	r0
     15a:	11 24       	eor	r1, r1
     15c:	2f 93       	push	r18
     15e:	3f 93       	push	r19
     160:	4f 93       	push	r20
     162:	5f 93       	push	r21
     164:	6f 93       	push	r22
     166:	7f 93       	push	r23
     168:	8f 93       	push	r24
     16a:	9f 93       	push	r25
     16c:	af 93       	push	r26
     16e:	bf 93       	push	r27
     170:	ef 93       	push	r30
     172:	ff 93       	push	r31
	
	if (PADC_void_CallBack != 0)
     174:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <PADC_void_CallBack>
     178:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <PADC_void_CallBack+0x1>
     17c:	30 97       	sbiw	r30, 0x00	; 0
     17e:	81 f0       	breq	.+32     	; 0x1a0 <__vector_21+0x4e>
	{
		u16 Local_Result = 0;
		if (PADC_Conversion_Resolution == ADC_8BIT)
     180:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <PADC_Conversion_Resolution>
     184:	81 30       	cpi	r24, 0x01	; 1
     186:	21 f4       	brne	.+8      	; 0x190 <__vector_21+0x3e>
		{
			Local_Result = ADC_REG->ADC_ADCH;
     188:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	07 c0       	rjmp	.+14     	; 0x19e <__vector_21+0x4c>
		}
		else
		{
			Local_Result = ADC_REG->ADC_ADCL;
     190:	a8 e7       	ldi	r26, 0x78	; 120
     192:	b0 e0       	ldi	r27, 0x00	; 0
     194:	8c 91       	ld	r24, X
			Local_Result |= ((u16)ADC_REG->ADC_ADCH)<<8;
     196:	11 96       	adiw	r26, 0x01	; 1
     198:	2c 91       	ld	r18, X
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	92 2b       	or	r25, r18
		}
		
		PADC_void_CallBack(Local_Result);
     19e:	09 95       	icall
	}
	if (PADC_FREE_RUNNING_MODE)
     1a0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
     1a4:	88 23       	and	r24, r24
     1a6:	29 f0       	breq	.+10     	; 0x1b2 <__vector_21+0x60>
		SET_BIT(ADC_REG->ADC_ADCSRA,6);
     1a8:	e8 e7       	ldi	r30, 0x78	; 120
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	82 81       	ldd	r24, Z+2	; 0x02
     1ae:	80 64       	ori	r24, 0x40	; 64
     1b0:	82 83       	std	Z+2, r24	; 0x02
}
     1b2:	ff 91       	pop	r31
     1b4:	ef 91       	pop	r30
     1b6:	bf 91       	pop	r27
     1b8:	af 91       	pop	r26
     1ba:	9f 91       	pop	r25
     1bc:	8f 91       	pop	r24
     1be:	7f 91       	pop	r23
     1c0:	6f 91       	pop	r22
     1c2:	5f 91       	pop	r21
     1c4:	4f 91       	pop	r20
     1c6:	3f 91       	pop	r19
     1c8:	2f 91       	pop	r18
     1ca:	0f 90       	pop	r0
     1cc:	0f be       	out	0x3f, r0	; 63
     1ce:	0f 90       	pop	r0
     1d0:	1f 90       	pop	r1
     1d2:	18 95       	reti

000001d4 <MCLOCK_u32GetSystemClock>:
		__asm__ volatile("NOP");
}

u32 MCLOCK_u32GetSystemClock(void){
	return CLOCK_SYSTEM_FREQUENCY;
}
     1d4:	60 e0       	ldi	r22, 0x00	; 0
     1d6:	72 e1       	ldi	r23, 0x12	; 18
     1d8:	8a e7       	ldi	r24, 0x7A	; 122
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	08 95       	ret

000001de <MEXTI_void_EnableInterrupt>:
			case PCINT_1:
				SET_BIT(EXTI_FLAGS_REG->EXTI_PCIFR,1);
				break;
			
			case PCINT_2:
				SET_BIT(EXTI_FLAGS_REG->EXTI_PCIFR,2);
     1de:	82 30       	cpi	r24, 0x02	; 2
     1e0:	79 f0       	breq	.+30     	; 0x200 <MEXTI_void_EnableInterrupt+0x22>
     1e2:	28 f4       	brcc	.+10     	; 0x1ee <MEXTI_void_EnableInterrupt+0x10>
     1e4:	88 23       	and	r24, r24
     1e6:	41 f0       	breq	.+16     	; 0x1f8 <MEXTI_void_EnableInterrupt+0x1a>
     1e8:	81 30       	cpi	r24, 0x01	; 1
     1ea:	41 f0       	breq	.+16     	; 0x1fc <MEXTI_void_EnableInterrupt+0x1e>
     1ec:	08 95       	ret
     1ee:	83 30       	cpi	r24, 0x03	; 3
     1f0:	69 f0       	breq	.+26     	; 0x20c <MEXTI_void_EnableInterrupt+0x2e>
     1f2:	84 30       	cpi	r24, 0x04	; 4
     1f4:	89 f0       	breq	.+34     	; 0x218 <MEXTI_void_EnableInterrupt+0x3a>
     1f6:	08 95       	ret
     1f8:	e8 9a       	sbi	0x1d, 0	; 29
     1fa:	13 c0       	rjmp	.+38     	; 0x222 <MEXTI_void_EnableInterrupt+0x44>
     1fc:	e9 9a       	sbi	0x1d, 1	; 29
     1fe:	11 c0       	rjmp	.+34     	; 0x222 <MEXTI_void_EnableInterrupt+0x44>
     200:	e8 e6       	ldi	r30, 0x68	; 104
     202:	f0 e0       	ldi	r31, 0x00	; 0
     204:	80 81       	ld	r24, Z
     206:	81 60       	ori	r24, 0x01	; 1
     208:	80 83       	st	Z, r24
     20a:	0b c0       	rjmp	.+22     	; 0x222 <MEXTI_void_EnableInterrupt+0x44>
     20c:	e8 e6       	ldi	r30, 0x68	; 104
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	82 60       	ori	r24, 0x02	; 2
     214:	80 83       	st	Z, r24
     216:	05 c0       	rjmp	.+10     	; 0x222 <MEXTI_void_EnableInterrupt+0x44>
     218:	e8 e6       	ldi	r30, 0x68	; 104
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	80 81       	ld	r24, Z
     21e:	84 60       	ori	r24, 0x04	; 4
     220:	80 83       	st	Z, r24
     222:	8f b7       	in	r24, 0x3f	; 63
     224:	80 68       	ori	r24, 0x80	; 128
     226:	8f bf       	out	0x3f, r24	; 63
     228:	08 95       	ret

0000022a <MEXTI_void_SetTrigger>:
     22a:	88 23       	and	r24, r24
     22c:	19 f0       	breq	.+6      	; 0x234 <MEXTI_void_SetTrigger+0xa>
     22e:	81 30       	cpi	r24, 0x01	; 1
     230:	51 f0       	breq	.+20     	; 0x246 <MEXTI_void_SetTrigger+0x1c>
     232:	08 95       	ret
     234:	e9 e6       	ldi	r30, 0x69	; 105
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	80 81       	ld	r24, Z
     23a:	8c 7f       	andi	r24, 0xFC	; 252
     23c:	80 83       	st	Z, r24
     23e:	80 81       	ld	r24, Z
     240:	68 2b       	or	r22, r24
     242:	60 83       	st	Z, r22
     244:	08 95       	ret
     246:	e9 e6       	ldi	r30, 0x69	; 105
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	83 7f       	andi	r24, 0xF3	; 243
     24e:	80 83       	st	Z, r24
     250:	80 81       	ld	r24, Z
     252:	66 0f       	add	r22, r22
     254:	66 0f       	add	r22, r22
     256:	68 2b       	or	r22, r24
     258:	60 83       	st	Z, r22
     25a:	08 95       	ret

0000025c <MEXTI_void_SetCallBack>:
	
}
	
void MEXTI_void_SetCallBack (enum EXTI_t Interrupt, void (*CallBack)(void))
{
		switch (Interrupt)
     25c:	82 30       	cpi	r24, 0x02	; 2
     25e:	a9 f0       	breq	.+42     	; 0x28a <MEXTI_void_SetCallBack+0x2e>
     260:	28 f4       	brcc	.+10     	; 0x26c <MEXTI_void_SetCallBack+0x10>
     262:	88 23       	and	r24, r24
     264:	41 f0       	breq	.+16     	; 0x276 <MEXTI_void_SetCallBack+0x1a>
     266:	81 30       	cpi	r24, 0x01	; 1
     268:	59 f0       	breq	.+22     	; 0x280 <MEXTI_void_SetCallBack+0x24>
     26a:	08 95       	ret
     26c:	83 30       	cpi	r24, 0x03	; 3
     26e:	91 f0       	breq	.+36     	; 0x294 <MEXTI_void_SetCallBack+0x38>
     270:	84 30       	cpi	r24, 0x04	; 4
     272:	a9 f0       	breq	.+42     	; 0x29e <MEXTI_void_SetCallBack+0x42>
     274:	08 95       	ret
		{
			case EXTI_0:
			PEXTI_void_CallBacks[0] = CallBack;
     276:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <PEXTI_void_CallBacks+0x1>
     27a:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <PEXTI_void_CallBacks>
			break;
     27e:	08 95       	ret
			
			case EXTI_1:
			PEXTI_void_CallBacks[1] = CallBack;
     280:	70 93 25 01 	sts	0x0125, r23	; 0x800125 <PEXTI_void_CallBacks+0x3>
     284:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <PEXTI_void_CallBacks+0x2>
			break;
     288:	08 95       	ret
			
			case PCINT_0:
			PEXTI_void_CallBacks[2] = CallBack;
     28a:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <PEXTI_void_CallBacks+0x5>
     28e:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <PEXTI_void_CallBacks+0x4>
			break;
     292:	08 95       	ret
			
			case PCINT_1:
			PEXTI_void_CallBacks[3] = CallBack;
     294:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <PEXTI_void_CallBacks+0x7>
     298:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <PEXTI_void_CallBacks+0x6>
			break;
     29c:	08 95       	ret
			
			case PCINT_2:
			PEXTI_void_CallBacks[4] = CallBack;
     29e:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <PEXTI_void_CallBacks+0x9>
     2a2:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <PEXTI_void_CallBacks+0x8>
     2a6:	08 95       	ret

000002a8 <__vector_1>:
		}
		
	}

void EXTI_VECTOR_ISR_EXTIO  (void)
{
     2a8:	1f 92       	push	r1
     2aa:	0f 92       	push	r0
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	0f 92       	push	r0
     2b0:	11 24       	eor	r1, r1
     2b2:	2f 93       	push	r18
     2b4:	3f 93       	push	r19
     2b6:	4f 93       	push	r20
     2b8:	5f 93       	push	r21
     2ba:	6f 93       	push	r22
     2bc:	7f 93       	push	r23
     2be:	8f 93       	push	r24
     2c0:	9f 93       	push	r25
     2c2:	af 93       	push	r26
     2c4:	bf 93       	push	r27
     2c6:	ef 93       	push	r30
     2c8:	ff 93       	push	r31
	
	if(PEXTI_void_CallBacks[0] != 0)
     2ca:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <PEXTI_void_CallBacks>
     2ce:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <PEXTI_void_CallBacks+0x1>
     2d2:	30 97       	sbiw	r30, 0x00	; 0
     2d4:	09 f0       	breq	.+2      	; 0x2d8 <__vector_1+0x30>
	{
		PEXTI_void_CallBacks[0]();
     2d6:	09 95       	icall
	}
}
     2d8:	ff 91       	pop	r31
     2da:	ef 91       	pop	r30
     2dc:	bf 91       	pop	r27
     2de:	af 91       	pop	r26
     2e0:	9f 91       	pop	r25
     2e2:	8f 91       	pop	r24
     2e4:	7f 91       	pop	r23
     2e6:	6f 91       	pop	r22
     2e8:	5f 91       	pop	r21
     2ea:	4f 91       	pop	r20
     2ec:	3f 91       	pop	r19
     2ee:	2f 91       	pop	r18
     2f0:	0f 90       	pop	r0
     2f2:	0f be       	out	0x3f, r0	; 63
     2f4:	0f 90       	pop	r0
     2f6:	1f 90       	pop	r1
     2f8:	18 95       	reti

000002fa <__vector_2>:
void EXTI_VECTOR_ISR_EXTI1  (void)
{
     2fa:	1f 92       	push	r1
     2fc:	0f 92       	push	r0
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	0f 92       	push	r0
     302:	11 24       	eor	r1, r1
     304:	2f 93       	push	r18
     306:	3f 93       	push	r19
     308:	4f 93       	push	r20
     30a:	5f 93       	push	r21
     30c:	6f 93       	push	r22
     30e:	7f 93       	push	r23
     310:	8f 93       	push	r24
     312:	9f 93       	push	r25
     314:	af 93       	push	r26
     316:	bf 93       	push	r27
     318:	ef 93       	push	r30
     31a:	ff 93       	push	r31
	
	if(PEXTI_void_CallBacks[1] != 0)
     31c:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <PEXTI_void_CallBacks+0x2>
     320:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <PEXTI_void_CallBacks+0x3>
     324:	30 97       	sbiw	r30, 0x00	; 0
     326:	09 f0       	breq	.+2      	; 0x32a <__vector_2+0x30>
	{
		PEXTI_void_CallBacks[1]();
     328:	09 95       	icall
	}
}
     32a:	ff 91       	pop	r31
     32c:	ef 91       	pop	r30
     32e:	bf 91       	pop	r27
     330:	af 91       	pop	r26
     332:	9f 91       	pop	r25
     334:	8f 91       	pop	r24
     336:	7f 91       	pop	r23
     338:	6f 91       	pop	r22
     33a:	5f 91       	pop	r21
     33c:	4f 91       	pop	r20
     33e:	3f 91       	pop	r19
     340:	2f 91       	pop	r18
     342:	0f 90       	pop	r0
     344:	0f be       	out	0x3f, r0	; 63
     346:	0f 90       	pop	r0
     348:	1f 90       	pop	r1
     34a:	18 95       	reti

0000034c <__vector_3>:
void EXTI_VECTOR_ISR_PCINT0 (void)
{
     34c:	1f 92       	push	r1
     34e:	0f 92       	push	r0
     350:	0f b6       	in	r0, 0x3f	; 63
     352:	0f 92       	push	r0
     354:	11 24       	eor	r1, r1
     356:	2f 93       	push	r18
     358:	3f 93       	push	r19
     35a:	4f 93       	push	r20
     35c:	5f 93       	push	r21
     35e:	6f 93       	push	r22
     360:	7f 93       	push	r23
     362:	8f 93       	push	r24
     364:	9f 93       	push	r25
     366:	af 93       	push	r26
     368:	bf 93       	push	r27
     36a:	ef 93       	push	r30
     36c:	ff 93       	push	r31
	
	if(PEXTI_void_CallBacks[2] != 0)
     36e:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <PEXTI_void_CallBacks+0x4>
     372:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <PEXTI_void_CallBacks+0x5>
     376:	30 97       	sbiw	r30, 0x00	; 0
     378:	09 f0       	breq	.+2      	; 0x37c <__vector_3+0x30>
	{
		PEXTI_void_CallBacks[2]();
     37a:	09 95       	icall
	}
}
     37c:	ff 91       	pop	r31
     37e:	ef 91       	pop	r30
     380:	bf 91       	pop	r27
     382:	af 91       	pop	r26
     384:	9f 91       	pop	r25
     386:	8f 91       	pop	r24
     388:	7f 91       	pop	r23
     38a:	6f 91       	pop	r22
     38c:	5f 91       	pop	r21
     38e:	4f 91       	pop	r20
     390:	3f 91       	pop	r19
     392:	2f 91       	pop	r18
     394:	0f 90       	pop	r0
     396:	0f be       	out	0x3f, r0	; 63
     398:	0f 90       	pop	r0
     39a:	1f 90       	pop	r1
     39c:	18 95       	reti

0000039e <__vector_4>:
void EXTI_VECTOR_ISR_PCINT1 (void)
{
     39e:	1f 92       	push	r1
     3a0:	0f 92       	push	r0
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	0f 92       	push	r0
     3a6:	11 24       	eor	r1, r1
     3a8:	2f 93       	push	r18
     3aa:	3f 93       	push	r19
     3ac:	4f 93       	push	r20
     3ae:	5f 93       	push	r21
     3b0:	6f 93       	push	r22
     3b2:	7f 93       	push	r23
     3b4:	8f 93       	push	r24
     3b6:	9f 93       	push	r25
     3b8:	af 93       	push	r26
     3ba:	bf 93       	push	r27
     3bc:	ef 93       	push	r30
     3be:	ff 93       	push	r31
	
	if(PEXTI_void_CallBacks[3] != 0)
     3c0:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <PEXTI_void_CallBacks+0x6>
     3c4:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <PEXTI_void_CallBacks+0x7>
     3c8:	30 97       	sbiw	r30, 0x00	; 0
     3ca:	09 f0       	breq	.+2      	; 0x3ce <__vector_4+0x30>
	{
		PEXTI_void_CallBacks[3]();
     3cc:	09 95       	icall
	}
}
     3ce:	ff 91       	pop	r31
     3d0:	ef 91       	pop	r30
     3d2:	bf 91       	pop	r27
     3d4:	af 91       	pop	r26
     3d6:	9f 91       	pop	r25
     3d8:	8f 91       	pop	r24
     3da:	7f 91       	pop	r23
     3dc:	6f 91       	pop	r22
     3de:	5f 91       	pop	r21
     3e0:	4f 91       	pop	r20
     3e2:	3f 91       	pop	r19
     3e4:	2f 91       	pop	r18
     3e6:	0f 90       	pop	r0
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	0f 90       	pop	r0
     3ec:	1f 90       	pop	r1
     3ee:	18 95       	reti

000003f0 <__vector_5>:
void EXTI_VECTOR_ISR_PCINT2 (void)
{
     3f0:	1f 92       	push	r1
     3f2:	0f 92       	push	r0
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	0f 92       	push	r0
     3f8:	11 24       	eor	r1, r1
     3fa:	2f 93       	push	r18
     3fc:	3f 93       	push	r19
     3fe:	4f 93       	push	r20
     400:	5f 93       	push	r21
     402:	6f 93       	push	r22
     404:	7f 93       	push	r23
     406:	8f 93       	push	r24
     408:	9f 93       	push	r25
     40a:	af 93       	push	r26
     40c:	bf 93       	push	r27
     40e:	ef 93       	push	r30
     410:	ff 93       	push	r31
	
	if(PEXTI_void_CallBacks[4] != 0)
     412:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <PEXTI_void_CallBacks+0x8>
     416:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <PEXTI_void_CallBacks+0x9>
     41a:	30 97       	sbiw	r30, 0x00	; 0
     41c:	09 f0       	breq	.+2      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
	{
		PEXTI_void_CallBacks[4]();
     41e:	09 95       	icall
	}
}
     420:	ff 91       	pop	r31
     422:	ef 91       	pop	r30
     424:	bf 91       	pop	r27
     426:	af 91       	pop	r26
     428:	9f 91       	pop	r25
     42a:	8f 91       	pop	r24
     42c:	7f 91       	pop	r23
     42e:	6f 91       	pop	r22
     430:	5f 91       	pop	r21
     432:	4f 91       	pop	r20
     434:	3f 91       	pop	r19
     436:	2f 91       	pop	r18
     438:	0f 90       	pop	r0
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	0f 90       	pop	r0
     43e:	1f 90       	pop	r1
     440:	18 95       	reti

00000442 <PGPIO_PRegister_t_GetPtrToReg>:
			CLR_REG(local_PReg->DDR);
			SET_REG(local_PReg->PORT);
			break;

	}
	}
     442:	81 30       	cpi	r24, 0x01	; 1
     444:	21 f0       	breq	.+8      	; 0x44e <PGPIO_PRegister_t_GetPtrToReg+0xc>
     446:	60 f0       	brcs	.+24     	; 0x460 <PGPIO_PRegister_t_GetPtrToReg+0x1e>
     448:	82 30       	cpi	r24, 0x02	; 2
     44a:	21 f0       	breq	.+8      	; 0x454 <PGPIO_PRegister_t_GetPtrToReg+0x12>
     44c:	06 c0       	rjmp	.+12     	; 0x45a <PGPIO_PRegister_t_GetPtrToReg+0x18>
     44e:	86 e2       	ldi	r24, 0x26	; 38
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	08 95       	ret
     454:	89 e2       	ldi	r24, 0x29	; 41
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	08 95       	ret
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	08 95       	ret
     460:	83 e2       	ldi	r24, 0x23	; 35
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	08 95       	ret

00000466 <MGPIO_void_SetPinDirection>:
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	d6 2f       	mov	r29, r22
     46c:	c4 2f       	mov	r28, r20
     46e:	0e 94 21 02 	call	0x442	; 0x442 <PGPIO_PRegister_t_GetPtrToReg>
     472:	fc 01       	movw	r30, r24
     474:	89 2b       	or	r24, r25
     476:	a9 f1       	breq	.+106    	; 0x4e2 <MGPIO_void_SetPinDirection+0x7c>
     478:	c1 30       	cpi	r28, 0x01	; 1
     47a:	a1 f0       	breq	.+40     	; 0x4a4 <MGPIO_void_SetPinDirection+0x3e>
     47c:	18 f0       	brcs	.+6      	; 0x484 <MGPIO_void_SetPinDirection+0x1e>
     47e:	c2 30       	cpi	r28, 0x02	; 2
     480:	09 f1       	breq	.+66     	; 0x4c4 <MGPIO_void_SetPinDirection+0x5e>
     482:	2f c0       	rjmp	.+94     	; 0x4e2 <MGPIO_void_SetPinDirection+0x7c>
     484:	21 81       	ldd	r18, Z+1	; 0x01
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	02 c0       	rjmp	.+4      	; 0x490 <MGPIO_void_SetPinDirection+0x2a>
     48c:	88 0f       	add	r24, r24
     48e:	99 1f       	adc	r25, r25
     490:	da 95       	dec	r29
     492:	e2 f7       	brpl	.-8      	; 0x48c <MGPIO_void_SetPinDirection+0x26>
     494:	80 95       	com	r24
     496:	92 2f       	mov	r25, r18
     498:	98 23       	and	r25, r24
     49a:	91 83       	std	Z+1, r25	; 0x01
     49c:	92 81       	ldd	r25, Z+2	; 0x02
     49e:	89 23       	and	r24, r25
     4a0:	82 83       	std	Z+2, r24	; 0x02
     4a2:	1f c0       	rjmp	.+62     	; 0x4e2 <MGPIO_void_SetPinDirection+0x7c>
     4a4:	21 81       	ldd	r18, Z+1	; 0x01
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <MGPIO_void_SetPinDirection+0x4a>
     4ac:	88 0f       	add	r24, r24
     4ae:	99 1f       	adc	r25, r25
     4b0:	da 95       	dec	r29
     4b2:	e2 f7       	brpl	.-8      	; 0x4ac <MGPIO_void_SetPinDirection+0x46>
     4b4:	92 2f       	mov	r25, r18
     4b6:	98 2b       	or	r25, r24
     4b8:	91 83       	std	Z+1, r25	; 0x01
     4ba:	92 81       	ldd	r25, Z+2	; 0x02
     4bc:	80 95       	com	r24
     4be:	89 23       	and	r24, r25
     4c0:	82 83       	std	Z+2, r24	; 0x02
     4c2:	0f c0       	rjmp	.+30     	; 0x4e2 <MGPIO_void_SetPinDirection+0x7c>
     4c4:	21 81       	ldd	r18, Z+1	; 0x01
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <MGPIO_void_SetPinDirection+0x6a>
     4cc:	88 0f       	add	r24, r24
     4ce:	99 1f       	adc	r25, r25
     4d0:	da 95       	dec	r29
     4d2:	e2 f7       	brpl	.-8      	; 0x4cc <MGPIO_void_SetPinDirection+0x66>
     4d4:	98 2f       	mov	r25, r24
     4d6:	90 95       	com	r25
     4d8:	92 23       	and	r25, r18
     4da:	91 83       	std	Z+1, r25	; 0x01
     4dc:	92 81       	ldd	r25, Z+2	; 0x02
     4de:	89 2b       	or	r24, r25
     4e0:	82 83       	std	Z+2, r24	; 0x02
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	08 95       	ret

000004e8 <MGPIO_void_SetPinValue>:

void MGPIO_void_SetPinValue (enum GPIOPORT_t PortID, u8 PinNumber, enum GPIOSTATE_t Value)
{
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
     4ec:	d6 2f       	mov	r29, r22
     4ee:	c4 2f       	mov	r28, r20
	volatile REGISTER_t* local_PReg =0;
	local_PReg = PGPIO_PRegister_t_GetPtrToReg(PortID);
     4f0:	0e 94 21 02 	call	0x442	; 0x442 <PGPIO_PRegister_t_GetPtrToReg>
	if (local_PReg == 0)
     4f4:	00 97       	sbiw	r24, 0x00	; 0
     4f6:	e9 f0       	breq	.+58     	; 0x532 <MGPIO_void_SetPinValue+0x4a>
		return;
	switch (Value)
     4f8:	cc 23       	and	r28, r28
     4fa:	19 f0       	breq	.+6      	; 0x502 <MGPIO_void_SetPinValue+0x1a>
     4fc:	c1 30       	cpi	r28, 0x01	; 1
     4fe:	71 f0       	breq	.+28     	; 0x51c <MGPIO_void_SetPinValue+0x34>
     500:	18 c0       	rjmp	.+48     	; 0x532 <MGPIO_void_SetPinValue+0x4a>
	{
		case  GPIO_LOW:
			CLR_BIT(local_PReg->PORT,PinNumber);
     502:	fc 01       	movw	r30, r24
     504:	42 81       	ldd	r20, Z+2	; 0x02
     506:	21 e0       	ldi	r18, 0x01	; 1
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	02 c0       	rjmp	.+4      	; 0x510 <MGPIO_void_SetPinValue+0x28>
     50c:	22 0f       	add	r18, r18
     50e:	33 1f       	adc	r19, r19
     510:	da 95       	dec	r29
     512:	e2 f7       	brpl	.-8      	; 0x50c <MGPIO_void_SetPinValue+0x24>
     514:	20 95       	com	r18
     516:	24 23       	and	r18, r20
     518:	22 83       	std	Z+2, r18	; 0x02
			break;
     51a:	0b c0       	rjmp	.+22     	; 0x532 <MGPIO_void_SetPinValue+0x4a>
		case  GPIO_HIGH:
			SET_BIT(local_PReg->PORT,PinNumber);
     51c:	fc 01       	movw	r30, r24
     51e:	42 81       	ldd	r20, Z+2	; 0x02
     520:	21 e0       	ldi	r18, 0x01	; 1
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	02 c0       	rjmp	.+4      	; 0x52a <MGPIO_void_SetPinValue+0x42>
     526:	22 0f       	add	r18, r18
     528:	33 1f       	adc	r19, r19
     52a:	da 95       	dec	r29
     52c:	e2 f7       	brpl	.-8      	; 0x526 <MGPIO_void_SetPinValue+0x3e>
     52e:	24 2b       	or	r18, r20
     530:	22 83       	std	Z+2, r18	; 0x02
			break;

	}

	}
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	08 95       	ret

00000538 <reset_flag>:
}


void reset_flag(void)
{
	flag = 1 ;
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <flag>
     53e:	08 95       	ret

00000540 <main>:
u16 update_wall(Position cell,u8 state_walls, u8 orientation);
void reset_flag(void) ;

int main(void)
{
	MGPIO_void_SetPinDirection(GPIO_PORTD,3,GPIO_OUTPUT);		//s0
     540:	41 e0       	ldi	r20, 0x01	; 1
     542:	63 e0       	ldi	r22, 0x03	; 3
     544:	82 e0       	ldi	r24, 0x02	; 2
     546:	0e 94 33 02 	call	0x466	; 0x466 <MGPIO_void_SetPinDirection>
	MGPIO_void_SetPinDirection(GPIO_PORTD,4,GPIO_OUTPUT);		//s1
     54a:	41 e0       	ldi	r20, 0x01	; 1
     54c:	64 e0       	ldi	r22, 0x04	; 4
     54e:	82 e0       	ldi	r24, 0x02	; 2
     550:	0e 94 33 02 	call	0x466	; 0x466 <MGPIO_void_SetPinDirection>
	MGPIO_void_SetPinDirection(GPIO_PORTD,7,GPIO_OUTPUT);		//s2
     554:	41 e0       	ldi	r20, 0x01	; 1
     556:	67 e0       	ldi	r22, 0x07	; 7
     558:	82 e0       	ldi	r24, 0x02	; 2
     55a:	0e 94 33 02 	call	0x466	; 0x466 <MGPIO_void_SetPinDirection>

	MGPIO_void_SetPinDirection(GPIO_PORTC,0,GPIO_INPUT);	// SharpIR
     55e:	40 e0       	ldi	r20, 0x00	; 0
     560:	60 e0       	ldi	r22, 0x00	; 0
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	0e 94 33 02 	call	0x466	; 0x466 <MGPIO_void_SetPinDirection>
	MGPIO_void_SetPinDirection(GPIO_PORTD,2,GPIO_INPUT_PULLUP);
     568:	42 e0       	ldi	r20, 0x02	; 2
     56a:	62 e0       	ldi	r22, 0x02	; 2
     56c:	82 e0       	ldi	r24, 0x02	; 2
     56e:	0e 94 33 02 	call	0x466	; 0x466 <MGPIO_void_SetPinDirection>
	
	MGPIO_void_SetPinDirection (GPIO_PORTD , 5 , GPIO_OUTPUT);
     572:	41 e0       	ldi	r20, 0x01	; 1
     574:	65 e0       	ldi	r22, 0x05	; 5
     576:	82 e0       	ldi	r24, 0x02	; 2
     578:	0e 94 33 02 	call	0x466	; 0x466 <MGPIO_void_SetPinDirection>
	MGPIO_void_SetPinDirection (GPIO_PORTD , 6 , GPIO_OUTPUT);
     57c:	41 e0       	ldi	r20, 0x01	; 1
     57e:	66 e0       	ldi	r22, 0x06	; 6
     580:	82 e0       	ldi	r24, 0x02	; 2
     582:	0e 94 33 02 	call	0x466	; 0x466 <MGPIO_void_SetPinDirection>
	
	MGPIO_void_SetPinDirection (GPIO_PORTB , 4 , GPIO_OUTPUT);
     586:	41 e0       	ldi	r20, 0x01	; 1
     588:	64 e0       	ldi	r22, 0x04	; 4
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	0e 94 33 02 	call	0x466	; 0x466 <MGPIO_void_SetPinDirection>
	MGPIO_void_SetPinDirection (GPIO_PORTB , 5 , GPIO_OUTPUT);
     590:	41 e0       	ldi	r20, 0x01	; 1
     592:	65 e0       	ldi	r22, 0x05	; 5
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	0e 94 33 02 	call	0x466	; 0x466 <MGPIO_void_SetPinDirection>
	MGPIO_void_SetPinDirection (GPIO_PORTB , 2 , GPIO_OUTPUT);
     59a:	41 e0       	ldi	r20, 0x01	; 1
     59c:	62 e0       	ldi	r22, 0x02	; 2
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	0e 94 33 02 	call	0x466	; 0x466 <MGPIO_void_SetPinDirection>
	MGPIO_void_SetPinDirection (GPIO_PORTB , 3 , GPIO_OUTPUT);
     5a4:	41 e0       	ldi	r20, 0x01	; 1
     5a6:	63 e0       	ldi	r22, 0x03	; 3
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	0e 94 33 02 	call	0x466	; 0x466 <MGPIO_void_SetPinDirection>
	MADC_void_Initialize (  ADC_MODE_SINGLE_CONVERSION , ADC_AVCC , ACD_128_PRE , ADC_10BIT );
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	47 e0       	ldi	r20, 0x07	; 7
     5b2:	61 e0       	ldi	r22, 0x01	; 1
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	0e 94 53 00 	call	0xa6	; 0xa6 <MADC_void_Initialize>

	HMotorPidControl_void_PIDinitialize();
     5ba:	0e 94 5f 03 	call	0x6be	; 0x6be <HMotorPidControl_void_PIDinitialize>
	MEXTI_void_EnableInterrupt (EXTI_0);
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	0e 94 ef 00 	call	0x1de	; 0x1de <MEXTI_void_EnableInterrupt>
	MEXTI_void_SetTrigger(EXTI_0, TRIGGER_RISING_EDGE);
     5c4:	63 e0       	ldi	r22, 0x03	; 3
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	0e 94 15 01 	call	0x22a	; 0x22a <MEXTI_void_SetTrigger>
	MEXTI_void_SetCallBack (EXTI_0, &reset_flag);
     5cc:	6c e9       	ldi	r22, 0x9C	; 156
     5ce:	72 e0       	ldi	r23, 0x02	; 2
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	0e 94 2e 01 	call	0x25c	; 0x25c <MEXTI_void_SetCallBack>
	
	MTIM8_void_initialize(TIM0 ,TIM_FAST_PWM, TIM_FAST_PWM_NON_INVERTING , TIM_FAST_PWM_NON_INVERTING ,TIM_CS_64_PRESCALER );
     5d6:	03 e0       	ldi	r16, 0x03	; 3
     5d8:	22 e0       	ldi	r18, 0x02	; 2
     5da:	42 e0       	ldi	r20, 0x02	; 2
     5dc:	63 e0       	ldi	r22, 0x03	; 3
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	0e 94 ad 03 	call	0x75a	; 0x75a <MTIM8_void_initialize>
	MTIM8_void_initialize(TIM2 ,TIM_NORMAL_MODE, 0 , 0 ,TIM_CS_64_PRESCALER );
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	40 e0       	ldi	r20, 0x00	; 0
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	0e 94 ad 03 	call	0x75a	; 0x75a <MTIM8_void_initialize>
	HMotorPidControl_void_StopRobot();
     5f0:	0e 94 8b 03 	call	0x716	; 0x716 <HMotorPidControl_void_StopRobot>


	u8 IR_Sensor_Read =0;
	Node* Header = (Node*)malloc(sizeof(Node)) ;
     5f4:	85 e0       	ldi	r24, 0x05	; 5
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	0e 94 49 08 	call	0x1092	; 0x1092 <malloc>
     5fc:	ec 01       	movw	r28, r24
	Node* Trailer =(Node*)malloc(sizeof(Node)) ;
     5fe:	85 e0       	ldi	r24, 0x05	; 5
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	0e 94 49 08 	call	0x1092	; 0x1092 <malloc>

	Header->Next = Trailer;
     606:	9a 83       	std	Y+2, r25	; 0x02
     608:	89 83       	std	Y+1, r24	; 0x01
	Trailer->Prev = Header;
     60a:	fc 01       	movw	r30, r24
     60c:	d4 83       	std	Z+4, r29	; 0x04
     60e:	c3 83       	std	Z+3, r28	; 0x03
	u16 min_and_dir = 0;
	u8 arr_mux[3] = {2,0,5} ;   // front_r - "front_l" - right - left

	while (1)
    {
		if(flag)
     610:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <flag>
     614:	88 23       	and	r24, r24
     616:	f1 f3       	breq	.-4      	; 0x614 <main+0xd4>
		{
			
				MGPIO_void_SetPinValue (GPIO_PORTD, 3, GET_BIT(arr_mux[0],0) );
     618:	40 e0       	ldi	r20, 0x00	; 0
     61a:	63 e0       	ldi	r22, 0x03	; 3
     61c:	82 e0       	ldi	r24, 0x02	; 2
     61e:	0e 94 74 02 	call	0x4e8	; 0x4e8 <MGPIO_void_SetPinValue>
				MGPIO_void_SetPinValue (GPIO_PORTD, 4, GET_BIT(arr_mux[0],1) );
     622:	41 e0       	ldi	r20, 0x01	; 1
     624:	64 e0       	ldi	r22, 0x04	; 4
     626:	82 e0       	ldi	r24, 0x02	; 2
     628:	0e 94 74 02 	call	0x4e8	; 0x4e8 <MGPIO_void_SetPinValue>
				MGPIO_void_SetPinValue (GPIO_PORTD, 7, GET_BIT(arr_mux[0],2) );
     62c:	40 e0       	ldi	r20, 0x00	; 0
     62e:	67 e0       	ldi	r22, 0x07	; 7
     630:	82 e0       	ldi	r24, 0x02	; 2
     632:	0e 94 74 02 	call	0x4e8	; 0x4e8 <MGPIO_void_SetPinValue>
				if (MADC_u16_ReadChannelSynch ( ADC_6  ) < 825 )
     636:	86 e0       	ldi	r24, 0x06	; 6
     638:	0e 94 81 00 	call	0x102	; 0x102 <MADC_u16_ReadChannelSynch>
     63c:	89 33       	cpi	r24, 0x39	; 57
     63e:	93 40       	sbci	r25, 0x03	; 3
     640:	a8 f4       	brcc	.+42     	; 0x66c <main+0x12c>
				{
					MGPIO_void_SetPinValue (GPIO_PORTB , 4 , GPIO_HIGH);
     642:	41 e0       	ldi	r20, 0x01	; 1
     644:	64 e0       	ldi	r22, 0x04	; 4
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	0e 94 74 02 	call	0x4e8	; 0x4e8 <MGPIO_void_SetPinValue>
					MGPIO_void_SetPinValue (GPIO_PORTB , 5 , GPIO_LOW);
     64c:	40 e0       	ldi	r20, 0x00	; 0
     64e:	65 e0       	ldi	r22, 0x05	; 5
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	0e 94 74 02 	call	0x4e8	; 0x4e8 <MGPIO_void_SetPinValue>
					MGPIO_void_SetPinValue (GPIO_PORTB , 2 , GPIO_HIGH);
     656:	41 e0       	ldi	r20, 0x01	; 1
     658:	62 e0       	ldi	r22, 0x02	; 2
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	0e 94 74 02 	call	0x4e8	; 0x4e8 <MGPIO_void_SetPinValue>
					MGPIO_void_SetPinValue (GPIO_PORTB , 3 , GPIO_LOW);
     660:	40 e0       	ldi	r20, 0x00	; 0
     662:	63 e0       	ldi	r22, 0x03	; 3
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	0e 94 74 02 	call	0x4e8	; 0x4e8 <MGPIO_void_SetPinValue>
     66a:	d2 cf       	rjmp	.-92     	; 0x610 <main+0xd0>
				}
				else
				{
					
						MGPIO_void_SetPinValue (GPIO_PORTB , 4 , GPIO_LOW);
     66c:	40 e0       	ldi	r20, 0x00	; 0
     66e:	64 e0       	ldi	r22, 0x04	; 4
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	0e 94 74 02 	call	0x4e8	; 0x4e8 <MGPIO_void_SetPinValue>
						MGPIO_void_SetPinValue (GPIO_PORTB , 5 , GPIO_LOW);
     676:	40 e0       	ldi	r20, 0x00	; 0
     678:	65 e0       	ldi	r22, 0x05	; 5
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	0e 94 74 02 	call	0x4e8	; 0x4e8 <MGPIO_void_SetPinValue>
						MGPIO_void_SetPinValue (GPIO_PORTB , 2 , GPIO_LOW);
     680:	40 e0       	ldi	r20, 0x00	; 0
     682:	62 e0       	ldi	r22, 0x02	; 2
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	0e 94 74 02 	call	0x4e8	; 0x4e8 <MGPIO_void_SetPinValue>
						MGPIO_void_SetPinValue (GPIO_PORTB , 3 , GPIO_LOW);
     68a:	40 e0       	ldi	r20, 0x00	; 0
     68c:	63 e0       	ldi	r22, 0x03	; 3
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	0e 94 74 02 	call	0x4e8	; 0x4e8 <MGPIO_void_SetPinValue>
     694:	bd cf       	rjmp	.-134    	; 0x610 <main+0xd0>

00000696 <HMotorPidControl_void_CountTimeUs>:
			HMotorPidControl_void_RotateRobot (TURN_45_LEFT);
			HMotorPidControl_void_MoveRobotForward (Copy_u8_CellsNumber);			
			break;	
	}
	
}
     696:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <PCurrT>
     69a:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <PCurrT+0x1>
     69e:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <PCurrT+0x2>
     6a2:	b0 91 30 01 	lds	r27, 0x0130	; 0x800130 <PCurrT+0x3>
     6a6:	01 96       	adiw	r24, 0x01	; 1
     6a8:	a1 1d       	adc	r26, r1
     6aa:	b1 1d       	adc	r27, r1
     6ac:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <PCurrT>
     6b0:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <PCurrT+0x1>
     6b4:	a0 93 2f 01 	sts	0x012F, r26	; 0x80012f <PCurrT+0x2>
     6b8:	b0 93 30 01 	sts	0x0130, r27	; 0x800130 <PCurrT+0x3>
     6bc:	08 95       	ret

000006be <HMotorPidControl_void_PIDinitialize>:
     6be:	2b e4       	ldi	r18, 0x4B	; 75
     6c0:	33 e0       	ldi	r19, 0x03	; 3
     6c2:	41 e0       	ldi	r20, 0x01	; 1
     6c4:	50 e0       	ldi	r21, 0x00	; 0
     6c6:	60 e0       	ldi	r22, 0x00	; 0
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	0e 94 ef 03 	call	0x7de	; 0x7de <MTIM8_void_SetPeriodicFunction>
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	0e 94 81 00 	call	0x102	; 0x102 <MADC_u16_ReadChannelSynch>
     6d6:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <PReference_Reading_1+0x1>
     6da:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <PReference_Reading_1>
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	0e 94 81 00 	call	0x102	; 0x102 <MADC_u16_ReadChannelSynch>
     6e4:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <PReference_Reading_2+0x1>
     6e8:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <PReference_Reading_2>
     6ec:	41 e0       	ldi	r20, 0x01	; 1
     6ee:	64 e0       	ldi	r22, 0x04	; 4
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	0e 94 33 02 	call	0x466	; 0x466 <MGPIO_void_SetPinDirection>
     6f6:	41 e0       	ldi	r20, 0x01	; 1
     6f8:	65 e0       	ldi	r22, 0x05	; 5
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	0e 94 33 02 	call	0x466	; 0x466 <MGPIO_void_SetPinDirection>
     700:	41 e0       	ldi	r20, 0x01	; 1
     702:	62 e0       	ldi	r22, 0x02	; 2
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	0e 94 33 02 	call	0x466	; 0x466 <MGPIO_void_SetPinDirection>
     70a:	41 e0       	ldi	r20, 0x01	; 1
     70c:	63 e0       	ldi	r22, 0x03	; 3
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	0e 94 33 02 	call	0x466	; 0x466 <MGPIO_void_SetPinDirection>
     714:	08 95       	ret

00000716 <HMotorPidControl_void_StopRobot>:

void HMotorPidControl_void_StopRobot (void)
{
	MGPIO_void_SetPinValue (GPIO_PORTB , 4 , GPIO_LOW);
     716:	40 e0       	ldi	r20, 0x00	; 0
     718:	64 e0       	ldi	r22, 0x04	; 4
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	0e 94 74 02 	call	0x4e8	; 0x4e8 <MGPIO_void_SetPinValue>
	MGPIO_void_SetPinValue (GPIO_PORTB , 5 , GPIO_LOW);
     720:	40 e0       	ldi	r20, 0x00	; 0
     722:	65 e0       	ldi	r22, 0x05	; 5
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	0e 94 74 02 	call	0x4e8	; 0x4e8 <MGPIO_void_SetPinValue>
	MGPIO_void_SetPinValue (GPIO_PORTB , 2 , GPIO_LOW);
     72a:	40 e0       	ldi	r20, 0x00	; 0
     72c:	62 e0       	ldi	r22, 0x02	; 2
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	0e 94 74 02 	call	0x4e8	; 0x4e8 <MGPIO_void_SetPinValue>
	MGPIO_void_SetPinValue (GPIO_PORTB , 3 , GPIO_LOW);
     734:	40 e0       	ldi	r20, 0x00	; 0
     736:	63 e0       	ldi	r22, 0x03	; 3
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	0e 94 74 02 	call	0x4e8	; 0x4e8 <MGPIO_void_SetPinValue>
     73e:	08 95       	ret

00000740 <PTIM8_GetTimPointer>:
		return(GET_BIT(*TIFR2_REG,INTERRUPT_TYPE));
		break ;
	default :
		return 0 ;
	}
}
     740:	88 23       	and	r24, r24
     742:	41 f0       	breq	.+16     	; 0x754 <PTIM8_GetTimPointer+0x14>
     744:	81 30       	cpi	r24, 0x01	; 1
     746:	19 f4       	brne	.+6      	; 0x74e <PTIM8_GetTimPointer+0xe>
     748:	80 eb       	ldi	r24, 0xB0	; 176
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	08 95       	ret
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	08 95       	ret
     754:	84 e4       	ldi	r24, 0x44	; 68
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	08 95       	ret

0000075a <MTIM8_void_initialize>:
     75a:	df 92       	push	r13
     75c:	ef 92       	push	r14
     75e:	ff 92       	push	r15
     760:	0f 93       	push	r16
     762:	1f 93       	push	r17
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	82 30       	cpi	r24, 0x02	; 2
     76a:	88 f5       	brcc	.+98     	; 0x7ce <MTIM8_void_initialize+0x74>
     76c:	d2 2f       	mov	r29, r18
     76e:	c4 2f       	mov	r28, r20
     770:	16 2f       	mov	r17, r22
     772:	d8 2e       	mov	r13, r24
     774:	0e 94 a0 03 	call	0x740	; 0x740 <PTIM8_GetTimPointer>
     778:	fc 01       	movw	r30, r24
     77a:	10 82       	st	Z, r1
     77c:	11 82       	std	Z+1, r1	; 0x01
     77e:	80 81       	ld	r24, Z
     780:	21 2f       	mov	r18, r17
     782:	23 70       	andi	r18, 0x03	; 3
     784:	42 2f       	mov	r20, r18
     786:	48 2b       	or	r20, r24
     788:	80 e1       	ldi	r24, 0x10	; 16
     78a:	d8 9f       	mul	r29, r24
     78c:	90 01       	movw	r18, r0
     78e:	11 24       	eor	r1, r1
     790:	24 2b       	or	r18, r20
     792:	80 e4       	ldi	r24, 0x40	; 64
     794:	c8 9f       	mul	r28, r24
     796:	a0 01       	movw	r20, r0
     798:	11 24       	eor	r1, r1
     79a:	42 2b       	or	r20, r18
     79c:	40 83       	st	Z, r20
     79e:	81 81       	ldd	r24, Z+1	; 0x01
     7a0:	12 fb       	bst	r17, 2
     7a2:	ee 24       	eor	r14, r14
     7a4:	e0 f8       	bld	r14, 0
     7a6:	f1 2c       	mov	r15, r1
     7a8:	ee 0c       	add	r14, r14
     7aa:	ff 1c       	adc	r15, r15
     7ac:	ee 0c       	add	r14, r14
     7ae:	ff 1c       	adc	r15, r15
     7b0:	ee 0c       	add	r14, r14
     7b2:	ff 1c       	adc	r15, r15
     7b4:	80 2b       	or	r24, r16
     7b6:	e8 2a       	or	r14, r24
     7b8:	e1 82       	std	Z+1, r14	; 0x01
     7ba:	8d 2d       	mov	r24, r13
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	fc 01       	movw	r30, r24
     7c0:	eb 5a       	subi	r30, 0xAB	; 171
     7c2:	fe 4f       	sbci	r31, 0xFE	; 254
     7c4:	00 83       	st	Z, r16
     7c6:	fc 01       	movw	r30, r24
     7c8:	ef 5b       	subi	r30, 0xBF	; 191
     7ca:	fe 4f       	sbci	r31, 0xFE	; 254
     7cc:	10 83       	st	Z, r17
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	1f 91       	pop	r17
     7d4:	0f 91       	pop	r16
     7d6:	ff 90       	pop	r15
     7d8:	ef 90       	pop	r14
     7da:	df 90       	pop	r13
     7dc:	08 95       	ret

000007de <MTIM8_void_SetPeriodicFunction>:
     7de:	2f 92       	push	r2
     7e0:	3f 92       	push	r3
     7e2:	4f 92       	push	r4
     7e4:	5f 92       	push	r5
     7e6:	6f 92       	push	r6
     7e8:	7f 92       	push	r7
     7ea:	8f 92       	push	r8
     7ec:	9f 92       	push	r9
     7ee:	af 92       	push	r10
     7f0:	bf 92       	push	r11
     7f2:	cf 92       	push	r12
     7f4:	df 92       	push	r13
     7f6:	ef 92       	push	r14
     7f8:	ff 92       	push	r15
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	cf 93       	push	r28
     800:	c8 2f       	mov	r28, r24
     802:	6a 01       	movw	r12, r20
     804:	7b 01       	movw	r14, r22
     806:	59 01       	movw	r10, r18
     808:	82 30       	cpi	r24, 0x02	; 2
     80a:	08 f0       	brcs	.+2      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     80c:	95 c0       	rjmp	.+298    	; 0x938 <__stack+0x39>
     80e:	08 2f       	mov	r16, r24
     810:	10 e0       	ldi	r17, 0x00	; 0
     812:	f8 01       	movw	r30, r16
     814:	eb 5a       	subi	r30, 0xAB	; 171
     816:	fe 4f       	sbci	r31, 0xFE	; 254
     818:	90 80       	ld	r9, Z
     81a:	8f ef       	ldi	r24, 0xFF	; 255
     81c:	89 0d       	add	r24, r9
     81e:	85 30       	cpi	r24, 0x05	; 5
     820:	08 f0       	brcs	.+2      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     822:	8a c0       	rjmp	.+276    	; 0x938 <__stack+0x39>
     824:	f8 01       	movw	r30, r16
     826:	ef 5b       	subi	r30, 0xBF	; 191
     828:	fe 4f       	sbci	r31, 0xFE	; 254
     82a:	80 81       	ld	r24, Z
     82c:	81 30       	cpi	r24, 0x01	; 1
     82e:	21 f4       	brne	.+8      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     830:	f6 94       	lsr	r15
     832:	e7 94       	ror	r14
     834:	d7 94       	ror	r13
     836:	c7 94       	ror	r12
     838:	8c 2f       	mov	r24, r28
     83a:	0e 94 a0 03 	call	0x740	; 0x740 <PTIM8_GetTimPointer>
     83e:	1c 01       	movw	r2, r24
     840:	f8 01       	movw	r30, r16
     842:	ee 0f       	add	r30, r30
     844:	ff 1f       	adc	r31, r31
     846:	e3 5c       	subi	r30, 0xC3	; 195
     848:	fe 4f       	sbci	r31, 0xFE	; 254
     84a:	b1 82       	std	Z+1, r11	; 0x01
     84c:	a0 82       	st	Z, r10
     84e:	e9 2d       	mov	r30, r9
     850:	f0 e0       	ldi	r31, 0x00	; 0
     852:	ee 0f       	add	r30, r30
     854:	ff 1f       	adc	r31, r31
     856:	ee 0f       	add	r30, r30
     858:	ff 1f       	adc	r31, r31
     85a:	ea 5f       	subi	r30, 0xFA	; 250
     85c:	fe 4f       	sbci	r31, 0xFE	; 254
     85e:	40 80       	ld	r4, Z
     860:	51 80       	ldd	r5, Z+1	; 0x01
     862:	62 80       	ldd	r6, Z+2	; 0x02
     864:	73 80       	ldd	r7, Z+3	; 0x03
     866:	76 2c       	mov	r7, r6
     868:	65 2c       	mov	r6, r5
     86a:	54 2c       	mov	r5, r4
     86c:	44 24       	eor	r4, r4
     86e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <MCLOCK_u32GetSystemClock>
     872:	4b 01       	movw	r8, r22
     874:	5c 01       	movw	r10, r24
     876:	c7 01       	movw	r24, r14
     878:	b6 01       	movw	r22, r12
     87a:	0e 94 2c 07 	call	0xe58	; 0xe58 <__floatunsisf>
     87e:	6b 01       	movw	r12, r22
     880:	7c 01       	movw	r14, r24
     882:	c5 01       	movw	r24, r10
     884:	b4 01       	movw	r22, r8
     886:	20 e4       	ldi	r18, 0x40	; 64
     888:	32 e4       	ldi	r19, 0x42	; 66
     88a:	4f e0       	ldi	r20, 0x0F	; 15
     88c:	50 e0       	ldi	r21, 0x00	; 0
     88e:	0e 94 27 08 	call	0x104e	; 0x104e <__udivmodsi4>
     892:	c3 01       	movw	r24, r6
     894:	b2 01       	movw	r22, r4
     896:	0e 94 27 08 	call	0x104e	; 0x104e <__udivmodsi4>
     89a:	ca 01       	movw	r24, r20
     89c:	b9 01       	movw	r22, r18
     89e:	0e 94 2c 07 	call	0xe58	; 0xe58 <__floatunsisf>
     8a2:	9b 01       	movw	r18, r22
     8a4:	ac 01       	movw	r20, r24
     8a6:	c7 01       	movw	r24, r14
     8a8:	b6 01       	movw	r22, r12
     8aa:	0e 94 8b 06 	call	0xd16	; 0xd16 <__divsf3>
     8ae:	4b 01       	movw	r8, r22
     8b0:	5c 01       	movw	r10, r24
     8b2:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__fixunssfsi>
     8b6:	6b 01       	movw	r12, r22
     8b8:	7c 01       	movw	r14, r24
     8ba:	0e 94 2c 07 	call	0xe58	; 0xe58 <__floatunsisf>
     8be:	9b 01       	movw	r18, r22
     8c0:	ac 01       	movw	r20, r24
     8c2:	c5 01       	movw	r24, r10
     8c4:	b4 01       	movw	r22, r8
     8c6:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__subsf3>
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	40 e8       	ldi	r20, 0x80	; 128
     8d0:	53 e4       	ldi	r21, 0x43	; 67
     8d2:	0e 94 ba 07 	call	0xf74	; 0xf74 <__mulsf3>
     8d6:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__fixunssfsi>
     8da:	66 23       	and	r22, r22
     8dc:	61 f0       	breq	.+24     	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
     8de:	8f ef       	ldi	r24, 0xFF	; 255
     8e0:	c8 1a       	sub	r12, r24
     8e2:	d8 0a       	sbc	r13, r24
     8e4:	e8 0a       	sbc	r14, r24
     8e6:	f8 0a       	sbc	r15, r24
     8e8:	60 95       	com	r22
     8ea:	f1 01       	movw	r30, r2
     8ec:	62 83       	std	Z+2, r22	; 0x02
     8ee:	f8 01       	movw	r30, r16
     8f0:	ed 5a       	subi	r30, 0xAD	; 173
     8f2:	fe 4f       	sbci	r31, 0xFE	; 254
     8f4:	60 83       	st	Z, r22
     8f6:	00 0f       	add	r16, r16
     8f8:	11 1f       	adc	r17, r17
     8fa:	00 0f       	add	r16, r16
     8fc:	11 1f       	adc	r17, r17
     8fe:	f8 01       	movw	r30, r16
     900:	e5 5b       	subi	r30, 0xB5	; 181
     902:	fe 4f       	sbci	r31, 0xFE	; 254
     904:	c0 82       	st	Z, r12
     906:	d1 82       	std	Z+1, r13	; 0x01
     908:	e2 82       	std	Z+2, r14	; 0x02
     90a:	f3 82       	std	Z+3, r15	; 0x03
     90c:	cc 23       	and	r28, r28
     90e:	19 f0       	breq	.+6      	; 0x916 <__stack+0x17>
     910:	c1 30       	cpi	r28, 0x01	; 1
     912:	51 f0       	breq	.+20     	; 0x928 <__stack+0x29>
     914:	11 c0       	rjmp	.+34     	; 0x938 <__stack+0x39>
     916:	ee e6       	ldi	r30, 0x6E	; 110
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	80 81       	ld	r24, Z
     91c:	81 60       	ori	r24, 0x01	; 1
     91e:	80 83       	st	Z, r24
     920:	8f b7       	in	r24, 0x3f	; 63
     922:	80 68       	ori	r24, 0x80	; 128
     924:	8f bf       	out	0x3f, r24	; 63
     926:	08 c0       	rjmp	.+16     	; 0x938 <__stack+0x39>
     928:	e0 e7       	ldi	r30, 0x70	; 112
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	80 81       	ld	r24, Z
     92e:	81 60       	ori	r24, 0x01	; 1
     930:	80 83       	st	Z, r24
     932:	8f b7       	in	r24, 0x3f	; 63
     934:	80 68       	ori	r24, 0x80	; 128
     936:	8f bf       	out	0x3f, r24	; 63
     938:	cf 91       	pop	r28
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	df 90       	pop	r13
     944:	cf 90       	pop	r12
     946:	bf 90       	pop	r11
     948:	af 90       	pop	r10
     94a:	9f 90       	pop	r9
     94c:	8f 90       	pop	r8
     94e:	7f 90       	pop	r7
     950:	6f 90       	pop	r6
     952:	5f 90       	pop	r5
     954:	4f 90       	pop	r4
     956:	3f 90       	pop	r3
     958:	2f 90       	pop	r2
     95a:	08 95       	ret

0000095c <__vector_14>:

void TIM0_VECTOR_ISR_TIM0_COMPA  (void)
{
     95c:	1f 92       	push	r1
     95e:	0f 92       	push	r0
     960:	0f b6       	in	r0, 0x3f	; 63
     962:	0f 92       	push	r0
     964:	11 24       	eor	r1, r1
     966:	2f 93       	push	r18
     968:	3f 93       	push	r19
     96a:	4f 93       	push	r20
     96c:	5f 93       	push	r21
     96e:	6f 93       	push	r22
     970:	7f 93       	push	r23
     972:	8f 93       	push	r24
     974:	9f 93       	push	r25
     976:	af 93       	push	r26
     978:	bf 93       	push	r27
     97a:	ef 93       	push	r30
     97c:	ff 93       	push	r31
	if (p_8OutCompareMatchACallBack[TIM0]!=0)
     97e:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <p_8OutCompareMatchACallBack>
     982:	f0 91 3a 01 	lds	r31, 0x013A	; 0x80013a <p_8OutCompareMatchACallBack+0x1>
     986:	30 97       	sbiw	r30, 0x00	; 0
     988:	09 f0       	breq	.+2      	; 0x98c <__vector_14+0x30>
	{
		p_8OutCompareMatchACallBack[TIM0]() ;
     98a:	09 95       	icall
	}
}
     98c:	ff 91       	pop	r31
     98e:	ef 91       	pop	r30
     990:	bf 91       	pop	r27
     992:	af 91       	pop	r26
     994:	9f 91       	pop	r25
     996:	8f 91       	pop	r24
     998:	7f 91       	pop	r23
     99a:	6f 91       	pop	r22
     99c:	5f 91       	pop	r21
     99e:	4f 91       	pop	r20
     9a0:	3f 91       	pop	r19
     9a2:	2f 91       	pop	r18
     9a4:	0f 90       	pop	r0
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	0f 90       	pop	r0
     9aa:	1f 90       	pop	r1
     9ac:	18 95       	reti

000009ae <__vector_15>:


void TIM0_VECTOR_ISR_TIM0_COMPB  (void)
{
     9ae:	1f 92       	push	r1
     9b0:	0f 92       	push	r0
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	0f 92       	push	r0
     9b6:	11 24       	eor	r1, r1
     9b8:	2f 93       	push	r18
     9ba:	3f 93       	push	r19
     9bc:	4f 93       	push	r20
     9be:	5f 93       	push	r21
     9c0:	6f 93       	push	r22
     9c2:	7f 93       	push	r23
     9c4:	8f 93       	push	r24
     9c6:	9f 93       	push	r25
     9c8:	af 93       	push	r26
     9ca:	bf 93       	push	r27
     9cc:	ef 93       	push	r30
     9ce:	ff 93       	push	r31
	if (p_8OutCompareMatchBCallBack[TIM0]!=0)
     9d0:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <p_8OutCompareMatchBCallBack>
     9d4:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <p_8OutCompareMatchBCallBack+0x1>
     9d8:	30 97       	sbiw	r30, 0x00	; 0
     9da:	09 f0       	breq	.+2      	; 0x9de <__vector_15+0x30>
	{
		p_8OutCompareMatchBCallBack[TIM0]() ;
     9dc:	09 95       	icall
	}
}
     9de:	ff 91       	pop	r31
     9e0:	ef 91       	pop	r30
     9e2:	bf 91       	pop	r27
     9e4:	af 91       	pop	r26
     9e6:	9f 91       	pop	r25
     9e8:	8f 91       	pop	r24
     9ea:	7f 91       	pop	r23
     9ec:	6f 91       	pop	r22
     9ee:	5f 91       	pop	r21
     9f0:	4f 91       	pop	r20
     9f2:	3f 91       	pop	r19
     9f4:	2f 91       	pop	r18
     9f6:	0f 90       	pop	r0
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	0f 90       	pop	r0
     9fc:	1f 90       	pop	r1
     9fe:	18 95       	reti

00000a00 <__vector_16>:


void TIM0_VECTOR_ISR_TIM0_OVF  (void)
{
     a00:	1f 92       	push	r1
     a02:	0f 92       	push	r0
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	0f 92       	push	r0
     a08:	11 24       	eor	r1, r1
     a0a:	2f 93       	push	r18
     a0c:	3f 93       	push	r19
     a0e:	4f 93       	push	r20
     a10:	5f 93       	push	r21
     a12:	6f 93       	push	r22
     a14:	7f 93       	push	r23
     a16:	8f 93       	push	r24
     a18:	9f 93       	push	r25
     a1a:	af 93       	push	r26
     a1c:	bf 93       	push	r27
     a1e:	cf 93       	push	r28
     a20:	df 93       	push	r29
     a22:	ef 93       	push	r30
     a24:	ff 93       	push	r31
	if (p_8OverFlowCallBack[TIM0]!=0)
     a26:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <p_8OverFlowCallBack>
     a2a:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <p_8OverFlowCallBack+0x1>
     a2e:	30 97       	sbiw	r30, 0x00	; 0
     a30:	d1 f1       	breq	.+116    	; 0xaa6 <__vector_16+0xa6>
	{
		p_8OVFCounter[TIM0] ++ ;
     a32:	c3 e4       	ldi	r28, 0x43	; 67
     a34:	d1 e0       	ldi	r29, 0x01	; 1
     a36:	88 81       	ld	r24, Y
     a38:	99 81       	ldd	r25, Y+1	; 0x01
     a3a:	aa 81       	ldd	r26, Y+2	; 0x02
     a3c:	bb 81       	ldd	r27, Y+3	; 0x03
     a3e:	01 96       	adiw	r24, 0x01	; 1
     a40:	a1 1d       	adc	r26, r1
     a42:	b1 1d       	adc	r27, r1
     a44:	88 83       	st	Y, r24
     a46:	99 83       	std	Y+1, r25	; 0x01
     a48:	aa 83       	std	Y+2, r26	; 0x02
     a4a:	bb 83       	std	Y+3, r27	; 0x03
		if ((p_8PeriodicInterrupt_OVF_NUM[TIM0] == p_8OVFCounter[TIM0] ) || p_8PeriodicInterrupt_OVF_NUM[TIM0]==0 )
     a4c:	40 91 4b 01 	lds	r20, 0x014B	; 0x80014b <p_8PeriodicInterrupt_OVF_NUM>
     a50:	50 91 4c 01 	lds	r21, 0x014C	; 0x80014c <p_8PeriodicInterrupt_OVF_NUM+0x1>
     a54:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <p_8PeriodicInterrupt_OVF_NUM+0x2>
     a58:	70 91 4e 01 	lds	r23, 0x014E	; 0x80014e <p_8PeriodicInterrupt_OVF_NUM+0x3>
     a5c:	84 17       	cp	r24, r20
     a5e:	95 07       	cpc	r25, r21
     a60:	a6 07       	cpc	r26, r22
     a62:	b7 07       	cpc	r27, r23
     a64:	21 f0       	breq	.+8      	; 0xa6e <__vector_16+0x6e>
     a66:	45 2b       	or	r20, r21
     a68:	46 2b       	or	r20, r22
     a6a:	47 2b       	or	r20, r23
     a6c:	e1 f4       	brne	.+56     	; 0xaa6 <__vector_16+0xa6>
		{
		p_8OverFlowCallBack[TIM0]() ;
     a6e:	09 95       	icall
		p_8OVFCounter[TIM0] = 0 ;
     a70:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <p_8OVFCounter>
     a74:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <p_8OVFCounter+0x1>
     a78:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <p_8OVFCounter+0x2>
     a7c:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <p_8OVFCounter+0x3>
		if(p_8PeriodicInterrupt_OVF_NUM[TIM0]!=0 && p_8Mode[TIM0]==TIM_NORMAL_MODE)
     a80:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <p_8PeriodicInterrupt_OVF_NUM>
     a84:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <p_8PeriodicInterrupt_OVF_NUM+0x1>
     a88:	a0 91 4d 01 	lds	r26, 0x014D	; 0x80014d <p_8PeriodicInterrupt_OVF_NUM+0x2>
     a8c:	b0 91 4e 01 	lds	r27, 0x014E	; 0x80014e <p_8PeriodicInterrupt_OVF_NUM+0x3>
     a90:	89 2b       	or	r24, r25
     a92:	8a 2b       	or	r24, r26
     a94:	8b 2b       	or	r24, r27
     a96:	39 f0       	breq	.+14     	; 0xaa6 <__vector_16+0xa6>
     a98:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <p_8Mode>
     a9c:	81 11       	cpse	r24, r1
     a9e:	03 c0       	rjmp	.+6      	; 0xaa6 <__vector_16+0xa6>
			TIMER0_REG->TCNT = p_8PeriodicInterrupt_Preload[TIM0] ;
     aa0:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <p_8PeriodicInterrupt_Preload>
     aa4:	86 bd       	out	0x26, r24	; 38
		}
	}
}
     aa6:	ff 91       	pop	r31
     aa8:	ef 91       	pop	r30
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	bf 91       	pop	r27
     ab0:	af 91       	pop	r26
     ab2:	9f 91       	pop	r25
     ab4:	8f 91       	pop	r24
     ab6:	7f 91       	pop	r23
     ab8:	6f 91       	pop	r22
     aba:	5f 91       	pop	r21
     abc:	4f 91       	pop	r20
     abe:	3f 91       	pop	r19
     ac0:	2f 91       	pop	r18
     ac2:	0f 90       	pop	r0
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	0f 90       	pop	r0
     ac8:	1f 90       	pop	r1
     aca:	18 95       	reti

00000acc <__vector_7>:


void TIM2_VECTOR_ISR_TIM2_COMPA  (void)
{
     acc:	1f 92       	push	r1
     ace:	0f 92       	push	r0
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	0f 92       	push	r0
     ad4:	11 24       	eor	r1, r1
     ad6:	2f 93       	push	r18
     ad8:	3f 93       	push	r19
     ada:	4f 93       	push	r20
     adc:	5f 93       	push	r21
     ade:	6f 93       	push	r22
     ae0:	7f 93       	push	r23
     ae2:	8f 93       	push	r24
     ae4:	9f 93       	push	r25
     ae6:	af 93       	push	r26
     ae8:	bf 93       	push	r27
     aea:	ef 93       	push	r30
     aec:	ff 93       	push	r31
	if (p_8OutCompareMatchACallBack[TIM2]!=0)
     aee:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <p_8OutCompareMatchACallBack+0x2>
     af2:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <p_8OutCompareMatchACallBack+0x3>
     af6:	30 97       	sbiw	r30, 0x00	; 0
     af8:	09 f0       	breq	.+2      	; 0xafc <__vector_7+0x30>
	{
		p_8OutCompareMatchACallBack[TIM2]() ;
     afa:	09 95       	icall
	}

}
     afc:	ff 91       	pop	r31
     afe:	ef 91       	pop	r30
     b00:	bf 91       	pop	r27
     b02:	af 91       	pop	r26
     b04:	9f 91       	pop	r25
     b06:	8f 91       	pop	r24
     b08:	7f 91       	pop	r23
     b0a:	6f 91       	pop	r22
     b0c:	5f 91       	pop	r21
     b0e:	4f 91       	pop	r20
     b10:	3f 91       	pop	r19
     b12:	2f 91       	pop	r18
     b14:	0f 90       	pop	r0
     b16:	0f be       	out	0x3f, r0	; 63
     b18:	0f 90       	pop	r0
     b1a:	1f 90       	pop	r1
     b1c:	18 95       	reti

00000b1e <__vector_8>:


void TIM2_VECTOR_ISR_TIM2_COMPB  (void)
{
     b1e:	1f 92       	push	r1
     b20:	0f 92       	push	r0
     b22:	0f b6       	in	r0, 0x3f	; 63
     b24:	0f 92       	push	r0
     b26:	11 24       	eor	r1, r1
     b28:	2f 93       	push	r18
     b2a:	3f 93       	push	r19
     b2c:	4f 93       	push	r20
     b2e:	5f 93       	push	r21
     b30:	6f 93       	push	r22
     b32:	7f 93       	push	r23
     b34:	8f 93       	push	r24
     b36:	9f 93       	push	r25
     b38:	af 93       	push	r26
     b3a:	bf 93       	push	r27
     b3c:	ef 93       	push	r30
     b3e:	ff 93       	push	r31
	if (p_8OutCompareMatchBCallBack[TIM2]!=0)
     b40:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <p_8OutCompareMatchBCallBack+0x2>
     b44:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <p_8OutCompareMatchBCallBack+0x3>
     b48:	30 97       	sbiw	r30, 0x00	; 0
     b4a:	09 f0       	breq	.+2      	; 0xb4e <__vector_8+0x30>
	{
		p_8OutCompareMatchBCallBack[TIM2]() ;
     b4c:	09 95       	icall
	}
}
     b4e:	ff 91       	pop	r31
     b50:	ef 91       	pop	r30
     b52:	bf 91       	pop	r27
     b54:	af 91       	pop	r26
     b56:	9f 91       	pop	r25
     b58:	8f 91       	pop	r24
     b5a:	7f 91       	pop	r23
     b5c:	6f 91       	pop	r22
     b5e:	5f 91       	pop	r21
     b60:	4f 91       	pop	r20
     b62:	3f 91       	pop	r19
     b64:	2f 91       	pop	r18
     b66:	0f 90       	pop	r0
     b68:	0f be       	out	0x3f, r0	; 63
     b6a:	0f 90       	pop	r0
     b6c:	1f 90       	pop	r1
     b6e:	18 95       	reti

00000b70 <__vector_9>:


void TIM2_VECTOR_ISR_TIM2_OVF  (void)
{
     b70:	1f 92       	push	r1
     b72:	0f 92       	push	r0
     b74:	0f b6       	in	r0, 0x3f	; 63
     b76:	0f 92       	push	r0
     b78:	11 24       	eor	r1, r1
     b7a:	2f 93       	push	r18
     b7c:	3f 93       	push	r19
     b7e:	4f 93       	push	r20
     b80:	5f 93       	push	r21
     b82:	6f 93       	push	r22
     b84:	7f 93       	push	r23
     b86:	8f 93       	push	r24
     b88:	9f 93       	push	r25
     b8a:	af 93       	push	r26
     b8c:	bf 93       	push	r27
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	ef 93       	push	r30
     b94:	ff 93       	push	r31
	if (p_8OverFlowCallBack[TIM2]!=0)
     b96:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <p_8OverFlowCallBack+0x2>
     b9a:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <p_8OverFlowCallBack+0x3>
     b9e:	30 97       	sbiw	r30, 0x00	; 0
     ba0:	d1 f1       	breq	.+116    	; 0xc16 <__vector_9+0xa6>
	{
		p_8OVFCounter[TIM2] ++ ;
     ba2:	c3 e4       	ldi	r28, 0x43	; 67
     ba4:	d1 e0       	ldi	r29, 0x01	; 1
     ba6:	8c 81       	ldd	r24, Y+4	; 0x04
     ba8:	9d 81       	ldd	r25, Y+5	; 0x05
     baa:	ae 81       	ldd	r26, Y+6	; 0x06
     bac:	bf 81       	ldd	r27, Y+7	; 0x07
     bae:	01 96       	adiw	r24, 0x01	; 1
     bb0:	a1 1d       	adc	r26, r1
     bb2:	b1 1d       	adc	r27, r1
     bb4:	8c 83       	std	Y+4, r24	; 0x04
     bb6:	9d 83       	std	Y+5, r25	; 0x05
     bb8:	ae 83       	std	Y+6, r26	; 0x06
     bba:	bf 83       	std	Y+7, r27	; 0x07
		if ((p_8PeriodicInterrupt_OVF_NUM[TIM2] == p_8OVFCounter[TIM2] ) || p_8PeriodicInterrupt_OVF_NUM[TIM2]==0 )
     bbc:	40 91 4f 01 	lds	r20, 0x014F	; 0x80014f <p_8PeriodicInterrupt_OVF_NUM+0x4>
     bc0:	50 91 50 01 	lds	r21, 0x0150	; 0x800150 <p_8PeriodicInterrupt_OVF_NUM+0x5>
     bc4:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <p_8PeriodicInterrupt_OVF_NUM+0x6>
     bc8:	70 91 52 01 	lds	r23, 0x0152	; 0x800152 <p_8PeriodicInterrupt_OVF_NUM+0x7>
     bcc:	84 17       	cp	r24, r20
     bce:	95 07       	cpc	r25, r21
     bd0:	a6 07       	cpc	r26, r22
     bd2:	b7 07       	cpc	r27, r23
     bd4:	21 f0       	breq	.+8      	; 0xbde <__vector_9+0x6e>
     bd6:	45 2b       	or	r20, r21
     bd8:	46 2b       	or	r20, r22
     bda:	47 2b       	or	r20, r23
     bdc:	e1 f4       	brne	.+56     	; 0xc16 <__vector_9+0xa6>
		{
		p_8OverFlowCallBack[TIM2]() ;
     bde:	09 95       	icall
		p_8OVFCounter[TIM2] = 0 ;
     be0:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <p_8OVFCounter+0x4>
     be4:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <p_8OVFCounter+0x5>
     be8:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <p_8OVFCounter+0x6>
     bec:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <p_8OVFCounter+0x7>
		if(p_8PeriodicInterrupt_OVF_NUM[TIM2]!=0 && p_8Mode[TIM2]==TIM_NORMAL_MODE)
     bf0:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <p_8PeriodicInterrupt_OVF_NUM+0x4>
     bf4:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <p_8PeriodicInterrupt_OVF_NUM+0x5>
     bf8:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <p_8PeriodicInterrupt_OVF_NUM+0x6>
     bfc:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <p_8PeriodicInterrupt_OVF_NUM+0x7>
     c00:	89 2b       	or	r24, r25
     c02:	8a 2b       	or	r24, r26
     c04:	8b 2b       	or	r24, r27
     c06:	39 f0       	breq	.+14     	; 0xc16 <__vector_9+0xa6>
     c08:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <p_8Mode+0x1>
     c0c:	81 11       	cpse	r24, r1
     c0e:	03 c0       	rjmp	.+6      	; 0xc16 <__vector_9+0xa6>
			TIMER0_REG->TCNT = p_8PeriodicInterrupt_Preload[TIM2] ;
     c10:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <p_8PeriodicInterrupt_Preload+0x1>
     c14:	86 bd       	out	0x26, r24	; 38
		}
	}
}
     c16:	ff 91       	pop	r31
     c18:	ef 91       	pop	r30
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	bf 91       	pop	r27
     c20:	af 91       	pop	r26
     c22:	9f 91       	pop	r25
     c24:	8f 91       	pop	r24
     c26:	7f 91       	pop	r23
     c28:	6f 91       	pop	r22
     c2a:	5f 91       	pop	r21
     c2c:	4f 91       	pop	r20
     c2e:	3f 91       	pop	r19
     c30:	2f 91       	pop	r18
     c32:	0f 90       	pop	r0
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	0f 90       	pop	r0
     c38:	1f 90       	pop	r1
     c3a:	18 95       	reti

00000c3c <__subsf3>:
     c3c:	50 58       	subi	r21, 0x80	; 128

00000c3e <__addsf3>:
     c3e:	bb 27       	eor	r27, r27
     c40:	aa 27       	eor	r26, r26
     c42:	0e 94 36 06 	call	0xc6c	; 0xc6c <__addsf3x>
     c46:	0c 94 80 07 	jmp	0xf00	; 0xf00 <__fp_round>
     c4a:	0e 94 72 07 	call	0xee4	; 0xee4 <__fp_pscA>
     c4e:	38 f0       	brcs	.+14     	; 0xc5e <__addsf3+0x20>
     c50:	0e 94 79 07 	call	0xef2	; 0xef2 <__fp_pscB>
     c54:	20 f0       	brcs	.+8      	; 0xc5e <__addsf3+0x20>
     c56:	39 f4       	brne	.+14     	; 0xc66 <__addsf3+0x28>
     c58:	9f 3f       	cpi	r25, 0xFF	; 255
     c5a:	19 f4       	brne	.+6      	; 0xc62 <__addsf3+0x24>
     c5c:	26 f4       	brtc	.+8      	; 0xc66 <__addsf3+0x28>
     c5e:	0c 94 6f 07 	jmp	0xede	; 0xede <__fp_nan>
     c62:	0e f4       	brtc	.+2      	; 0xc66 <__addsf3+0x28>
     c64:	e0 95       	com	r30
     c66:	e7 fb       	bst	r30, 7
     c68:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__fp_inf>

00000c6c <__addsf3x>:
     c6c:	e9 2f       	mov	r30, r25
     c6e:	0e 94 91 07 	call	0xf22	; 0xf22 <__fp_split3>
     c72:	58 f3       	brcs	.-42     	; 0xc4a <__addsf3+0xc>
     c74:	ba 17       	cp	r27, r26
     c76:	62 07       	cpc	r22, r18
     c78:	73 07       	cpc	r23, r19
     c7a:	84 07       	cpc	r24, r20
     c7c:	95 07       	cpc	r25, r21
     c7e:	20 f0       	brcs	.+8      	; 0xc88 <__addsf3x+0x1c>
     c80:	79 f4       	brne	.+30     	; 0xca0 <__addsf3x+0x34>
     c82:	a6 f5       	brtc	.+104    	; 0xcec <__addsf3x+0x80>
     c84:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <__fp_zero>
     c88:	0e f4       	brtc	.+2      	; 0xc8c <__addsf3x+0x20>
     c8a:	e0 95       	com	r30
     c8c:	0b 2e       	mov	r0, r27
     c8e:	ba 2f       	mov	r27, r26
     c90:	a0 2d       	mov	r26, r0
     c92:	0b 01       	movw	r0, r22
     c94:	b9 01       	movw	r22, r18
     c96:	90 01       	movw	r18, r0
     c98:	0c 01       	movw	r0, r24
     c9a:	ca 01       	movw	r24, r20
     c9c:	a0 01       	movw	r20, r0
     c9e:	11 24       	eor	r1, r1
     ca0:	ff 27       	eor	r31, r31
     ca2:	59 1b       	sub	r21, r25
     ca4:	99 f0       	breq	.+38     	; 0xccc <__addsf3x+0x60>
     ca6:	59 3f       	cpi	r21, 0xF9	; 249
     ca8:	50 f4       	brcc	.+20     	; 0xcbe <__addsf3x+0x52>
     caa:	50 3e       	cpi	r21, 0xE0	; 224
     cac:	68 f1       	brcs	.+90     	; 0xd08 <__addsf3x+0x9c>
     cae:	1a 16       	cp	r1, r26
     cb0:	f0 40       	sbci	r31, 0x00	; 0
     cb2:	a2 2f       	mov	r26, r18
     cb4:	23 2f       	mov	r18, r19
     cb6:	34 2f       	mov	r19, r20
     cb8:	44 27       	eor	r20, r20
     cba:	58 5f       	subi	r21, 0xF8	; 248
     cbc:	f3 cf       	rjmp	.-26     	; 0xca4 <__addsf3x+0x38>
     cbe:	46 95       	lsr	r20
     cc0:	37 95       	ror	r19
     cc2:	27 95       	ror	r18
     cc4:	a7 95       	ror	r26
     cc6:	f0 40       	sbci	r31, 0x00	; 0
     cc8:	53 95       	inc	r21
     cca:	c9 f7       	brne	.-14     	; 0xcbe <__addsf3x+0x52>
     ccc:	7e f4       	brtc	.+30     	; 0xcec <__addsf3x+0x80>
     cce:	1f 16       	cp	r1, r31
     cd0:	ba 0b       	sbc	r27, r26
     cd2:	62 0b       	sbc	r22, r18
     cd4:	73 0b       	sbc	r23, r19
     cd6:	84 0b       	sbc	r24, r20
     cd8:	ba f0       	brmi	.+46     	; 0xd08 <__addsf3x+0x9c>
     cda:	91 50       	subi	r25, 0x01	; 1
     cdc:	a1 f0       	breq	.+40     	; 0xd06 <__addsf3x+0x9a>
     cde:	ff 0f       	add	r31, r31
     ce0:	bb 1f       	adc	r27, r27
     ce2:	66 1f       	adc	r22, r22
     ce4:	77 1f       	adc	r23, r23
     ce6:	88 1f       	adc	r24, r24
     ce8:	c2 f7       	brpl	.-16     	; 0xcda <__addsf3x+0x6e>
     cea:	0e c0       	rjmp	.+28     	; 0xd08 <__addsf3x+0x9c>
     cec:	ba 0f       	add	r27, r26
     cee:	62 1f       	adc	r22, r18
     cf0:	73 1f       	adc	r23, r19
     cf2:	84 1f       	adc	r24, r20
     cf4:	48 f4       	brcc	.+18     	; 0xd08 <__addsf3x+0x9c>
     cf6:	87 95       	ror	r24
     cf8:	77 95       	ror	r23
     cfa:	67 95       	ror	r22
     cfc:	b7 95       	ror	r27
     cfe:	f7 95       	ror	r31
     d00:	9e 3f       	cpi	r25, 0xFE	; 254
     d02:	08 f0       	brcs	.+2      	; 0xd06 <__addsf3x+0x9a>
     d04:	b0 cf       	rjmp	.-160    	; 0xc66 <__addsf3+0x28>
     d06:	93 95       	inc	r25
     d08:	88 0f       	add	r24, r24
     d0a:	08 f0       	brcs	.+2      	; 0xd0e <__addsf3x+0xa2>
     d0c:	99 27       	eor	r25, r25
     d0e:	ee 0f       	add	r30, r30
     d10:	97 95       	ror	r25
     d12:	87 95       	ror	r24
     d14:	08 95       	ret

00000d16 <__divsf3>:
     d16:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__divsf3x>
     d1a:	0c 94 80 07 	jmp	0xf00	; 0xf00 <__fp_round>
     d1e:	0e 94 79 07 	call	0xef2	; 0xef2 <__fp_pscB>
     d22:	58 f0       	brcs	.+22     	; 0xd3a <__divsf3+0x24>
     d24:	0e 94 72 07 	call	0xee4	; 0xee4 <__fp_pscA>
     d28:	40 f0       	brcs	.+16     	; 0xd3a <__divsf3+0x24>
     d2a:	29 f4       	brne	.+10     	; 0xd36 <__divsf3+0x20>
     d2c:	5f 3f       	cpi	r21, 0xFF	; 255
     d2e:	29 f0       	breq	.+10     	; 0xd3a <__divsf3+0x24>
     d30:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__fp_inf>
     d34:	51 11       	cpse	r21, r1
     d36:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <__fp_szero>
     d3a:	0c 94 6f 07 	jmp	0xede	; 0xede <__fp_nan>

00000d3e <__divsf3x>:
     d3e:	0e 94 91 07 	call	0xf22	; 0xf22 <__fp_split3>
     d42:	68 f3       	brcs	.-38     	; 0xd1e <__divsf3+0x8>

00000d44 <__divsf3_pse>:
     d44:	99 23       	and	r25, r25
     d46:	b1 f3       	breq	.-20     	; 0xd34 <__divsf3+0x1e>
     d48:	55 23       	and	r21, r21
     d4a:	91 f3       	breq	.-28     	; 0xd30 <__divsf3+0x1a>
     d4c:	95 1b       	sub	r25, r21
     d4e:	55 0b       	sbc	r21, r21
     d50:	bb 27       	eor	r27, r27
     d52:	aa 27       	eor	r26, r26
     d54:	62 17       	cp	r22, r18
     d56:	73 07       	cpc	r23, r19
     d58:	84 07       	cpc	r24, r20
     d5a:	38 f0       	brcs	.+14     	; 0xd6a <__divsf3_pse+0x26>
     d5c:	9f 5f       	subi	r25, 0xFF	; 255
     d5e:	5f 4f       	sbci	r21, 0xFF	; 255
     d60:	22 0f       	add	r18, r18
     d62:	33 1f       	adc	r19, r19
     d64:	44 1f       	adc	r20, r20
     d66:	aa 1f       	adc	r26, r26
     d68:	a9 f3       	breq	.-22     	; 0xd54 <__divsf3_pse+0x10>
     d6a:	35 d0       	rcall	.+106    	; 0xdd6 <__divsf3_pse+0x92>
     d6c:	0e 2e       	mov	r0, r30
     d6e:	3a f0       	brmi	.+14     	; 0xd7e <__divsf3_pse+0x3a>
     d70:	e0 e8       	ldi	r30, 0x80	; 128
     d72:	32 d0       	rcall	.+100    	; 0xdd8 <__divsf3_pse+0x94>
     d74:	91 50       	subi	r25, 0x01	; 1
     d76:	50 40       	sbci	r21, 0x00	; 0
     d78:	e6 95       	lsr	r30
     d7a:	00 1c       	adc	r0, r0
     d7c:	ca f7       	brpl	.-14     	; 0xd70 <__divsf3_pse+0x2c>
     d7e:	2b d0       	rcall	.+86     	; 0xdd6 <__divsf3_pse+0x92>
     d80:	fe 2f       	mov	r31, r30
     d82:	29 d0       	rcall	.+82     	; 0xdd6 <__divsf3_pse+0x92>
     d84:	66 0f       	add	r22, r22
     d86:	77 1f       	adc	r23, r23
     d88:	88 1f       	adc	r24, r24
     d8a:	bb 1f       	adc	r27, r27
     d8c:	26 17       	cp	r18, r22
     d8e:	37 07       	cpc	r19, r23
     d90:	48 07       	cpc	r20, r24
     d92:	ab 07       	cpc	r26, r27
     d94:	b0 e8       	ldi	r27, 0x80	; 128
     d96:	09 f0       	breq	.+2      	; 0xd9a <__divsf3_pse+0x56>
     d98:	bb 0b       	sbc	r27, r27
     d9a:	80 2d       	mov	r24, r0
     d9c:	bf 01       	movw	r22, r30
     d9e:	ff 27       	eor	r31, r31
     da0:	93 58       	subi	r25, 0x83	; 131
     da2:	5f 4f       	sbci	r21, 0xFF	; 255
     da4:	3a f0       	brmi	.+14     	; 0xdb4 <__divsf3_pse+0x70>
     da6:	9e 3f       	cpi	r25, 0xFE	; 254
     da8:	51 05       	cpc	r21, r1
     daa:	78 f0       	brcs	.+30     	; 0xdca <__divsf3_pse+0x86>
     dac:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__fp_inf>
     db0:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <__fp_szero>
     db4:	5f 3f       	cpi	r21, 0xFF	; 255
     db6:	e4 f3       	brlt	.-8      	; 0xdb0 <__divsf3_pse+0x6c>
     db8:	98 3e       	cpi	r25, 0xE8	; 232
     dba:	d4 f3       	brlt	.-12     	; 0xdb0 <__divsf3_pse+0x6c>
     dbc:	86 95       	lsr	r24
     dbe:	77 95       	ror	r23
     dc0:	67 95       	ror	r22
     dc2:	b7 95       	ror	r27
     dc4:	f7 95       	ror	r31
     dc6:	9f 5f       	subi	r25, 0xFF	; 255
     dc8:	c9 f7       	brne	.-14     	; 0xdbc <__divsf3_pse+0x78>
     dca:	88 0f       	add	r24, r24
     dcc:	91 1d       	adc	r25, r1
     dce:	96 95       	lsr	r25
     dd0:	87 95       	ror	r24
     dd2:	97 f9       	bld	r25, 7
     dd4:	08 95       	ret
     dd6:	e1 e0       	ldi	r30, 0x01	; 1
     dd8:	66 0f       	add	r22, r22
     dda:	77 1f       	adc	r23, r23
     ddc:	88 1f       	adc	r24, r24
     dde:	bb 1f       	adc	r27, r27
     de0:	62 17       	cp	r22, r18
     de2:	73 07       	cpc	r23, r19
     de4:	84 07       	cpc	r24, r20
     de6:	ba 07       	cpc	r27, r26
     de8:	20 f0       	brcs	.+8      	; 0xdf2 <__divsf3_pse+0xae>
     dea:	62 1b       	sub	r22, r18
     dec:	73 0b       	sbc	r23, r19
     dee:	84 0b       	sbc	r24, r20
     df0:	ba 0b       	sbc	r27, r26
     df2:	ee 1f       	adc	r30, r30
     df4:	88 f7       	brcc	.-30     	; 0xdd8 <__divsf3_pse+0x94>
     df6:	e0 95       	com	r30
     df8:	08 95       	ret

00000dfa <__fixunssfsi>:
     dfa:	0e 94 99 07 	call	0xf32	; 0xf32 <__fp_splitA>
     dfe:	88 f0       	brcs	.+34     	; 0xe22 <__fixunssfsi+0x28>
     e00:	9f 57       	subi	r25, 0x7F	; 127
     e02:	98 f0       	brcs	.+38     	; 0xe2a <__fixunssfsi+0x30>
     e04:	b9 2f       	mov	r27, r25
     e06:	99 27       	eor	r25, r25
     e08:	b7 51       	subi	r27, 0x17	; 23
     e0a:	b0 f0       	brcs	.+44     	; 0xe38 <__fixunssfsi+0x3e>
     e0c:	e1 f0       	breq	.+56     	; 0xe46 <__fixunssfsi+0x4c>
     e0e:	66 0f       	add	r22, r22
     e10:	77 1f       	adc	r23, r23
     e12:	88 1f       	adc	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	1a f0       	brmi	.+6      	; 0xe1e <__fixunssfsi+0x24>
     e18:	ba 95       	dec	r27
     e1a:	c9 f7       	brne	.-14     	; 0xe0e <__fixunssfsi+0x14>
     e1c:	14 c0       	rjmp	.+40     	; 0xe46 <__fixunssfsi+0x4c>
     e1e:	b1 30       	cpi	r27, 0x01	; 1
     e20:	91 f0       	breq	.+36     	; 0xe46 <__fixunssfsi+0x4c>
     e22:	0e 94 b3 07 	call	0xf66	; 0xf66 <__fp_zero>
     e26:	b1 e0       	ldi	r27, 0x01	; 1
     e28:	08 95       	ret
     e2a:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <__fp_zero>
     e2e:	67 2f       	mov	r22, r23
     e30:	78 2f       	mov	r23, r24
     e32:	88 27       	eor	r24, r24
     e34:	b8 5f       	subi	r27, 0xF8	; 248
     e36:	39 f0       	breq	.+14     	; 0xe46 <__fixunssfsi+0x4c>
     e38:	b9 3f       	cpi	r27, 0xF9	; 249
     e3a:	cc f3       	brlt	.-14     	; 0xe2e <__fixunssfsi+0x34>
     e3c:	86 95       	lsr	r24
     e3e:	77 95       	ror	r23
     e40:	67 95       	ror	r22
     e42:	b3 95       	inc	r27
     e44:	d9 f7       	brne	.-10     	; 0xe3c <__fixunssfsi+0x42>
     e46:	3e f4       	brtc	.+14     	; 0xe56 <__fixunssfsi+0x5c>
     e48:	90 95       	com	r25
     e4a:	80 95       	com	r24
     e4c:	70 95       	com	r23
     e4e:	61 95       	neg	r22
     e50:	7f 4f       	sbci	r23, 0xFF	; 255
     e52:	8f 4f       	sbci	r24, 0xFF	; 255
     e54:	9f 4f       	sbci	r25, 0xFF	; 255
     e56:	08 95       	ret

00000e58 <__floatunsisf>:
     e58:	e8 94       	clt
     e5a:	09 c0       	rjmp	.+18     	; 0xe6e <__floatsisf+0x12>

00000e5c <__floatsisf>:
     e5c:	97 fb       	bst	r25, 7
     e5e:	3e f4       	brtc	.+14     	; 0xe6e <__floatsisf+0x12>
     e60:	90 95       	com	r25
     e62:	80 95       	com	r24
     e64:	70 95       	com	r23
     e66:	61 95       	neg	r22
     e68:	7f 4f       	sbci	r23, 0xFF	; 255
     e6a:	8f 4f       	sbci	r24, 0xFF	; 255
     e6c:	9f 4f       	sbci	r25, 0xFF	; 255
     e6e:	99 23       	and	r25, r25
     e70:	a9 f0       	breq	.+42     	; 0xe9c <__floatsisf+0x40>
     e72:	f9 2f       	mov	r31, r25
     e74:	96 e9       	ldi	r25, 0x96	; 150
     e76:	bb 27       	eor	r27, r27
     e78:	93 95       	inc	r25
     e7a:	f6 95       	lsr	r31
     e7c:	87 95       	ror	r24
     e7e:	77 95       	ror	r23
     e80:	67 95       	ror	r22
     e82:	b7 95       	ror	r27
     e84:	f1 11       	cpse	r31, r1
     e86:	f8 cf       	rjmp	.-16     	; 0xe78 <__floatsisf+0x1c>
     e88:	fa f4       	brpl	.+62     	; 0xec8 <__floatsisf+0x6c>
     e8a:	bb 0f       	add	r27, r27
     e8c:	11 f4       	brne	.+4      	; 0xe92 <__floatsisf+0x36>
     e8e:	60 ff       	sbrs	r22, 0
     e90:	1b c0       	rjmp	.+54     	; 0xec8 <__floatsisf+0x6c>
     e92:	6f 5f       	subi	r22, 0xFF	; 255
     e94:	7f 4f       	sbci	r23, 0xFF	; 255
     e96:	8f 4f       	sbci	r24, 0xFF	; 255
     e98:	9f 4f       	sbci	r25, 0xFF	; 255
     e9a:	16 c0       	rjmp	.+44     	; 0xec8 <__floatsisf+0x6c>
     e9c:	88 23       	and	r24, r24
     e9e:	11 f0       	breq	.+4      	; 0xea4 <__floatsisf+0x48>
     ea0:	96 e9       	ldi	r25, 0x96	; 150
     ea2:	11 c0       	rjmp	.+34     	; 0xec6 <__floatsisf+0x6a>
     ea4:	77 23       	and	r23, r23
     ea6:	21 f0       	breq	.+8      	; 0xeb0 <__floatsisf+0x54>
     ea8:	9e e8       	ldi	r25, 0x8E	; 142
     eaa:	87 2f       	mov	r24, r23
     eac:	76 2f       	mov	r23, r22
     eae:	05 c0       	rjmp	.+10     	; 0xeba <__floatsisf+0x5e>
     eb0:	66 23       	and	r22, r22
     eb2:	71 f0       	breq	.+28     	; 0xed0 <__floatsisf+0x74>
     eb4:	96 e8       	ldi	r25, 0x86	; 134
     eb6:	86 2f       	mov	r24, r22
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	2a f0       	brmi	.+10     	; 0xec8 <__floatsisf+0x6c>
     ebe:	9a 95       	dec	r25
     ec0:	66 0f       	add	r22, r22
     ec2:	77 1f       	adc	r23, r23
     ec4:	88 1f       	adc	r24, r24
     ec6:	da f7       	brpl	.-10     	; 0xebe <__floatsisf+0x62>
     ec8:	88 0f       	add	r24, r24
     eca:	96 95       	lsr	r25
     ecc:	87 95       	ror	r24
     ece:	97 f9       	bld	r25, 7
     ed0:	08 95       	ret

00000ed2 <__fp_inf>:
     ed2:	97 f9       	bld	r25, 7
     ed4:	9f 67       	ori	r25, 0x7F	; 127
     ed6:	80 e8       	ldi	r24, 0x80	; 128
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	60 e0       	ldi	r22, 0x00	; 0
     edc:	08 95       	ret

00000ede <__fp_nan>:
     ede:	9f ef       	ldi	r25, 0xFF	; 255
     ee0:	80 ec       	ldi	r24, 0xC0	; 192
     ee2:	08 95       	ret

00000ee4 <__fp_pscA>:
     ee4:	00 24       	eor	r0, r0
     ee6:	0a 94       	dec	r0
     ee8:	16 16       	cp	r1, r22
     eea:	17 06       	cpc	r1, r23
     eec:	18 06       	cpc	r1, r24
     eee:	09 06       	cpc	r0, r25
     ef0:	08 95       	ret

00000ef2 <__fp_pscB>:
     ef2:	00 24       	eor	r0, r0
     ef4:	0a 94       	dec	r0
     ef6:	12 16       	cp	r1, r18
     ef8:	13 06       	cpc	r1, r19
     efa:	14 06       	cpc	r1, r20
     efc:	05 06       	cpc	r0, r21
     efe:	08 95       	ret

00000f00 <__fp_round>:
     f00:	09 2e       	mov	r0, r25
     f02:	03 94       	inc	r0
     f04:	00 0c       	add	r0, r0
     f06:	11 f4       	brne	.+4      	; 0xf0c <__fp_round+0xc>
     f08:	88 23       	and	r24, r24
     f0a:	52 f0       	brmi	.+20     	; 0xf20 <__fp_round+0x20>
     f0c:	bb 0f       	add	r27, r27
     f0e:	40 f4       	brcc	.+16     	; 0xf20 <__fp_round+0x20>
     f10:	bf 2b       	or	r27, r31
     f12:	11 f4       	brne	.+4      	; 0xf18 <__fp_round+0x18>
     f14:	60 ff       	sbrs	r22, 0
     f16:	04 c0       	rjmp	.+8      	; 0xf20 <__fp_round+0x20>
     f18:	6f 5f       	subi	r22, 0xFF	; 255
     f1a:	7f 4f       	sbci	r23, 0xFF	; 255
     f1c:	8f 4f       	sbci	r24, 0xFF	; 255
     f1e:	9f 4f       	sbci	r25, 0xFF	; 255
     f20:	08 95       	ret

00000f22 <__fp_split3>:
     f22:	57 fd       	sbrc	r21, 7
     f24:	90 58       	subi	r25, 0x80	; 128
     f26:	44 0f       	add	r20, r20
     f28:	55 1f       	adc	r21, r21
     f2a:	59 f0       	breq	.+22     	; 0xf42 <__fp_splitA+0x10>
     f2c:	5f 3f       	cpi	r21, 0xFF	; 255
     f2e:	71 f0       	breq	.+28     	; 0xf4c <__fp_splitA+0x1a>
     f30:	47 95       	ror	r20

00000f32 <__fp_splitA>:
     f32:	88 0f       	add	r24, r24
     f34:	97 fb       	bst	r25, 7
     f36:	99 1f       	adc	r25, r25
     f38:	61 f0       	breq	.+24     	; 0xf52 <__fp_splitA+0x20>
     f3a:	9f 3f       	cpi	r25, 0xFF	; 255
     f3c:	79 f0       	breq	.+30     	; 0xf5c <__fp_splitA+0x2a>
     f3e:	87 95       	ror	r24
     f40:	08 95       	ret
     f42:	12 16       	cp	r1, r18
     f44:	13 06       	cpc	r1, r19
     f46:	14 06       	cpc	r1, r20
     f48:	55 1f       	adc	r21, r21
     f4a:	f2 cf       	rjmp	.-28     	; 0xf30 <__fp_split3+0xe>
     f4c:	46 95       	lsr	r20
     f4e:	f1 df       	rcall	.-30     	; 0xf32 <__fp_splitA>
     f50:	08 c0       	rjmp	.+16     	; 0xf62 <__fp_splitA+0x30>
     f52:	16 16       	cp	r1, r22
     f54:	17 06       	cpc	r1, r23
     f56:	18 06       	cpc	r1, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	f1 cf       	rjmp	.-30     	; 0xf3e <__fp_splitA+0xc>
     f5c:	86 95       	lsr	r24
     f5e:	71 05       	cpc	r23, r1
     f60:	61 05       	cpc	r22, r1
     f62:	08 94       	sec
     f64:	08 95       	ret

00000f66 <__fp_zero>:
     f66:	e8 94       	clt

00000f68 <__fp_szero>:
     f68:	bb 27       	eor	r27, r27
     f6a:	66 27       	eor	r22, r22
     f6c:	77 27       	eor	r23, r23
     f6e:	cb 01       	movw	r24, r22
     f70:	97 f9       	bld	r25, 7
     f72:	08 95       	ret

00000f74 <__mulsf3>:
     f74:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__mulsf3x>
     f78:	0c 94 80 07 	jmp	0xf00	; 0xf00 <__fp_round>
     f7c:	0e 94 72 07 	call	0xee4	; 0xee4 <__fp_pscA>
     f80:	38 f0       	brcs	.+14     	; 0xf90 <__mulsf3+0x1c>
     f82:	0e 94 79 07 	call	0xef2	; 0xef2 <__fp_pscB>
     f86:	20 f0       	brcs	.+8      	; 0xf90 <__mulsf3+0x1c>
     f88:	95 23       	and	r25, r21
     f8a:	11 f0       	breq	.+4      	; 0xf90 <__mulsf3+0x1c>
     f8c:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__fp_inf>
     f90:	0c 94 6f 07 	jmp	0xede	; 0xede <__fp_nan>
     f94:	11 24       	eor	r1, r1
     f96:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <__fp_szero>

00000f9a <__mulsf3x>:
     f9a:	0e 94 91 07 	call	0xf22	; 0xf22 <__fp_split3>
     f9e:	70 f3       	brcs	.-36     	; 0xf7c <__mulsf3+0x8>

00000fa0 <__mulsf3_pse>:
     fa0:	95 9f       	mul	r25, r21
     fa2:	c1 f3       	breq	.-16     	; 0xf94 <__mulsf3+0x20>
     fa4:	95 0f       	add	r25, r21
     fa6:	50 e0       	ldi	r21, 0x00	; 0
     fa8:	55 1f       	adc	r21, r21
     faa:	62 9f       	mul	r22, r18
     fac:	f0 01       	movw	r30, r0
     fae:	72 9f       	mul	r23, r18
     fb0:	bb 27       	eor	r27, r27
     fb2:	f0 0d       	add	r31, r0
     fb4:	b1 1d       	adc	r27, r1
     fb6:	63 9f       	mul	r22, r19
     fb8:	aa 27       	eor	r26, r26
     fba:	f0 0d       	add	r31, r0
     fbc:	b1 1d       	adc	r27, r1
     fbe:	aa 1f       	adc	r26, r26
     fc0:	64 9f       	mul	r22, r20
     fc2:	66 27       	eor	r22, r22
     fc4:	b0 0d       	add	r27, r0
     fc6:	a1 1d       	adc	r26, r1
     fc8:	66 1f       	adc	r22, r22
     fca:	82 9f       	mul	r24, r18
     fcc:	22 27       	eor	r18, r18
     fce:	b0 0d       	add	r27, r0
     fd0:	a1 1d       	adc	r26, r1
     fd2:	62 1f       	adc	r22, r18
     fd4:	73 9f       	mul	r23, r19
     fd6:	b0 0d       	add	r27, r0
     fd8:	a1 1d       	adc	r26, r1
     fda:	62 1f       	adc	r22, r18
     fdc:	83 9f       	mul	r24, r19
     fde:	a0 0d       	add	r26, r0
     fe0:	61 1d       	adc	r22, r1
     fe2:	22 1f       	adc	r18, r18
     fe4:	74 9f       	mul	r23, r20
     fe6:	33 27       	eor	r19, r19
     fe8:	a0 0d       	add	r26, r0
     fea:	61 1d       	adc	r22, r1
     fec:	23 1f       	adc	r18, r19
     fee:	84 9f       	mul	r24, r20
     ff0:	60 0d       	add	r22, r0
     ff2:	21 1d       	adc	r18, r1
     ff4:	82 2f       	mov	r24, r18
     ff6:	76 2f       	mov	r23, r22
     ff8:	6a 2f       	mov	r22, r26
     ffa:	11 24       	eor	r1, r1
     ffc:	9f 57       	subi	r25, 0x7F	; 127
     ffe:	50 40       	sbci	r21, 0x00	; 0
    1000:	9a f0       	brmi	.+38     	; 0x1028 <__mulsf3_pse+0x88>
    1002:	f1 f0       	breq	.+60     	; 0x1040 <__mulsf3_pse+0xa0>
    1004:	88 23       	and	r24, r24
    1006:	4a f0       	brmi	.+18     	; 0x101a <__mulsf3_pse+0x7a>
    1008:	ee 0f       	add	r30, r30
    100a:	ff 1f       	adc	r31, r31
    100c:	bb 1f       	adc	r27, r27
    100e:	66 1f       	adc	r22, r22
    1010:	77 1f       	adc	r23, r23
    1012:	88 1f       	adc	r24, r24
    1014:	91 50       	subi	r25, 0x01	; 1
    1016:	50 40       	sbci	r21, 0x00	; 0
    1018:	a9 f7       	brne	.-22     	; 0x1004 <__mulsf3_pse+0x64>
    101a:	9e 3f       	cpi	r25, 0xFE	; 254
    101c:	51 05       	cpc	r21, r1
    101e:	80 f0       	brcs	.+32     	; 0x1040 <__mulsf3_pse+0xa0>
    1020:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__fp_inf>
    1024:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <__fp_szero>
    1028:	5f 3f       	cpi	r21, 0xFF	; 255
    102a:	e4 f3       	brlt	.-8      	; 0x1024 <__mulsf3_pse+0x84>
    102c:	98 3e       	cpi	r25, 0xE8	; 232
    102e:	d4 f3       	brlt	.-12     	; 0x1024 <__mulsf3_pse+0x84>
    1030:	86 95       	lsr	r24
    1032:	77 95       	ror	r23
    1034:	67 95       	ror	r22
    1036:	b7 95       	ror	r27
    1038:	f7 95       	ror	r31
    103a:	e7 95       	ror	r30
    103c:	9f 5f       	subi	r25, 0xFF	; 255
    103e:	c1 f7       	brne	.-16     	; 0x1030 <__mulsf3_pse+0x90>
    1040:	fe 2b       	or	r31, r30
    1042:	88 0f       	add	r24, r24
    1044:	91 1d       	adc	r25, r1
    1046:	96 95       	lsr	r25
    1048:	87 95       	ror	r24
    104a:	97 f9       	bld	r25, 7
    104c:	08 95       	ret

0000104e <__udivmodsi4>:
    104e:	a1 e2       	ldi	r26, 0x21	; 33
    1050:	1a 2e       	mov	r1, r26
    1052:	aa 1b       	sub	r26, r26
    1054:	bb 1b       	sub	r27, r27
    1056:	fd 01       	movw	r30, r26
    1058:	0d c0       	rjmp	.+26     	; 0x1074 <__udivmodsi4_ep>

0000105a <__udivmodsi4_loop>:
    105a:	aa 1f       	adc	r26, r26
    105c:	bb 1f       	adc	r27, r27
    105e:	ee 1f       	adc	r30, r30
    1060:	ff 1f       	adc	r31, r31
    1062:	a2 17       	cp	r26, r18
    1064:	b3 07       	cpc	r27, r19
    1066:	e4 07       	cpc	r30, r20
    1068:	f5 07       	cpc	r31, r21
    106a:	20 f0       	brcs	.+8      	; 0x1074 <__udivmodsi4_ep>
    106c:	a2 1b       	sub	r26, r18
    106e:	b3 0b       	sbc	r27, r19
    1070:	e4 0b       	sbc	r30, r20
    1072:	f5 0b       	sbc	r31, r21

00001074 <__udivmodsi4_ep>:
    1074:	66 1f       	adc	r22, r22
    1076:	77 1f       	adc	r23, r23
    1078:	88 1f       	adc	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	1a 94       	dec	r1
    107e:	69 f7       	brne	.-38     	; 0x105a <__udivmodsi4_loop>
    1080:	60 95       	com	r22
    1082:	70 95       	com	r23
    1084:	80 95       	com	r24
    1086:	90 95       	com	r25
    1088:	9b 01       	movw	r18, r22
    108a:	ac 01       	movw	r20, r24
    108c:	bd 01       	movw	r22, r26
    108e:	cf 01       	movw	r24, r30
    1090:	08 95       	ret

00001092 <malloc>:
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	82 30       	cpi	r24, 0x02	; 2
    109c:	91 05       	cpc	r25, r1
    109e:	10 f4       	brcc	.+4      	; 0x10a4 <malloc+0x12>
    10a0:	82 e0       	ldi	r24, 0x02	; 2
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <__flp>
    10a8:	f0 91 5a 01 	lds	r31, 0x015A	; 0x80015a <__flp+0x1>
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	a0 e0       	ldi	r26, 0x00	; 0
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	30 97       	sbiw	r30, 0x00	; 0
    10b6:	19 f1       	breq	.+70     	; 0x10fe <malloc+0x6c>
    10b8:	40 81       	ld	r20, Z
    10ba:	51 81       	ldd	r21, Z+1	; 0x01
    10bc:	02 81       	ldd	r16, Z+2	; 0x02
    10be:	13 81       	ldd	r17, Z+3	; 0x03
    10c0:	48 17       	cp	r20, r24
    10c2:	59 07       	cpc	r21, r25
    10c4:	c8 f0       	brcs	.+50     	; 0x10f8 <malloc+0x66>
    10c6:	84 17       	cp	r24, r20
    10c8:	95 07       	cpc	r25, r21
    10ca:	69 f4       	brne	.+26     	; 0x10e6 <malloc+0x54>
    10cc:	10 97       	sbiw	r26, 0x00	; 0
    10ce:	31 f0       	breq	.+12     	; 0x10dc <malloc+0x4a>
    10d0:	12 96       	adiw	r26, 0x02	; 2
    10d2:	0c 93       	st	X, r16
    10d4:	12 97       	sbiw	r26, 0x02	; 2
    10d6:	13 96       	adiw	r26, 0x03	; 3
    10d8:	1c 93       	st	X, r17
    10da:	27 c0       	rjmp	.+78     	; 0x112a <malloc+0x98>
    10dc:	00 93 59 01 	sts	0x0159, r16	; 0x800159 <__flp>
    10e0:	10 93 5a 01 	sts	0x015A, r17	; 0x80015a <__flp+0x1>
    10e4:	22 c0       	rjmp	.+68     	; 0x112a <malloc+0x98>
    10e6:	21 15       	cp	r18, r1
    10e8:	31 05       	cpc	r19, r1
    10ea:	19 f0       	breq	.+6      	; 0x10f2 <malloc+0x60>
    10ec:	42 17       	cp	r20, r18
    10ee:	53 07       	cpc	r21, r19
    10f0:	18 f4       	brcc	.+6      	; 0x10f8 <malloc+0x66>
    10f2:	9a 01       	movw	r18, r20
    10f4:	bd 01       	movw	r22, r26
    10f6:	ef 01       	movw	r28, r30
    10f8:	df 01       	movw	r26, r30
    10fa:	f8 01       	movw	r30, r16
    10fc:	db cf       	rjmp	.-74     	; 0x10b4 <malloc+0x22>
    10fe:	21 15       	cp	r18, r1
    1100:	31 05       	cpc	r19, r1
    1102:	f9 f0       	breq	.+62     	; 0x1142 <malloc+0xb0>
    1104:	28 1b       	sub	r18, r24
    1106:	39 0b       	sbc	r19, r25
    1108:	24 30       	cpi	r18, 0x04	; 4
    110a:	31 05       	cpc	r19, r1
    110c:	80 f4       	brcc	.+32     	; 0x112e <malloc+0x9c>
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	9b 81       	ldd	r25, Y+3	; 0x03
    1112:	61 15       	cp	r22, r1
    1114:	71 05       	cpc	r23, r1
    1116:	21 f0       	breq	.+8      	; 0x1120 <malloc+0x8e>
    1118:	fb 01       	movw	r30, r22
    111a:	93 83       	std	Z+3, r25	; 0x03
    111c:	82 83       	std	Z+2, r24	; 0x02
    111e:	04 c0       	rjmp	.+8      	; 0x1128 <malloc+0x96>
    1120:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <__flp+0x1>
    1124:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <__flp>
    1128:	fe 01       	movw	r30, r28
    112a:	32 96       	adiw	r30, 0x02	; 2
    112c:	44 c0       	rjmp	.+136    	; 0x11b6 <malloc+0x124>
    112e:	fe 01       	movw	r30, r28
    1130:	e2 0f       	add	r30, r18
    1132:	f3 1f       	adc	r31, r19
    1134:	81 93       	st	Z+, r24
    1136:	91 93       	st	Z+, r25
    1138:	22 50       	subi	r18, 0x02	; 2
    113a:	31 09       	sbc	r19, r1
    113c:	39 83       	std	Y+1, r19	; 0x01
    113e:	28 83       	st	Y, r18
    1140:	3a c0       	rjmp	.+116    	; 0x11b6 <malloc+0x124>
    1142:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <__brkval>
    1146:	30 91 58 01 	lds	r19, 0x0158	; 0x800158 <__brkval+0x1>
    114a:	23 2b       	or	r18, r19
    114c:	41 f4       	brne	.+16     	; 0x115e <malloc+0xcc>
    114e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1152:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1156:	30 93 58 01 	sts	0x0158, r19	; 0x800158 <__brkval+0x1>
    115a:	20 93 57 01 	sts	0x0157, r18	; 0x800157 <__brkval>
    115e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1162:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1166:	21 15       	cp	r18, r1
    1168:	31 05       	cpc	r19, r1
    116a:	41 f4       	brne	.+16     	; 0x117c <malloc+0xea>
    116c:	2d b7       	in	r18, 0x3d	; 61
    116e:	3e b7       	in	r19, 0x3e	; 62
    1170:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1174:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1178:	24 1b       	sub	r18, r20
    117a:	35 0b       	sbc	r19, r21
    117c:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <__brkval>
    1180:	f0 91 58 01 	lds	r31, 0x0158	; 0x800158 <__brkval+0x1>
    1184:	e2 17       	cp	r30, r18
    1186:	f3 07       	cpc	r31, r19
    1188:	a0 f4       	brcc	.+40     	; 0x11b2 <malloc+0x120>
    118a:	2e 1b       	sub	r18, r30
    118c:	3f 0b       	sbc	r19, r31
    118e:	28 17       	cp	r18, r24
    1190:	39 07       	cpc	r19, r25
    1192:	78 f0       	brcs	.+30     	; 0x11b2 <malloc+0x120>
    1194:	ac 01       	movw	r20, r24
    1196:	4e 5f       	subi	r20, 0xFE	; 254
    1198:	5f 4f       	sbci	r21, 0xFF	; 255
    119a:	24 17       	cp	r18, r20
    119c:	35 07       	cpc	r19, r21
    119e:	48 f0       	brcs	.+18     	; 0x11b2 <malloc+0x120>
    11a0:	4e 0f       	add	r20, r30
    11a2:	5f 1f       	adc	r21, r31
    11a4:	50 93 58 01 	sts	0x0158, r21	; 0x800158 <__brkval+0x1>
    11a8:	40 93 57 01 	sts	0x0157, r20	; 0x800157 <__brkval>
    11ac:	81 93       	st	Z+, r24
    11ae:	91 93       	st	Z+, r25
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <malloc+0x124>
    11b2:	e0 e0       	ldi	r30, 0x00	; 0
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	cf 01       	movw	r24, r30
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	1f 91       	pop	r17
    11be:	0f 91       	pop	r16
    11c0:	08 95       	ret

000011c2 <free>:
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	09 f4       	brne	.+2      	; 0x11cc <free+0xa>
    11ca:	81 c0       	rjmp	.+258    	; 0x12ce <free+0x10c>
    11cc:	fc 01       	movw	r30, r24
    11ce:	32 97       	sbiw	r30, 0x02	; 2
    11d0:	13 82       	std	Z+3, r1	; 0x03
    11d2:	12 82       	std	Z+2, r1	; 0x02
    11d4:	a0 91 59 01 	lds	r26, 0x0159	; 0x800159 <__flp>
    11d8:	b0 91 5a 01 	lds	r27, 0x015A	; 0x80015a <__flp+0x1>
    11dc:	10 97       	sbiw	r26, 0x00	; 0
    11de:	81 f4       	brne	.+32     	; 0x1200 <free+0x3e>
    11e0:	20 81       	ld	r18, Z
    11e2:	31 81       	ldd	r19, Z+1	; 0x01
    11e4:	82 0f       	add	r24, r18
    11e6:	93 1f       	adc	r25, r19
    11e8:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <__brkval>
    11ec:	30 91 58 01 	lds	r19, 0x0158	; 0x800158 <__brkval+0x1>
    11f0:	28 17       	cp	r18, r24
    11f2:	39 07       	cpc	r19, r25
    11f4:	51 f5       	brne	.+84     	; 0x124a <free+0x88>
    11f6:	f0 93 58 01 	sts	0x0158, r31	; 0x800158 <__brkval+0x1>
    11fa:	e0 93 57 01 	sts	0x0157, r30	; 0x800157 <__brkval>
    11fe:	67 c0       	rjmp	.+206    	; 0x12ce <free+0x10c>
    1200:	ed 01       	movw	r28, r26
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	ce 17       	cp	r28, r30
    1208:	df 07       	cpc	r29, r31
    120a:	40 f4       	brcc	.+16     	; 0x121c <free+0x5a>
    120c:	4a 81       	ldd	r20, Y+2	; 0x02
    120e:	5b 81       	ldd	r21, Y+3	; 0x03
    1210:	9e 01       	movw	r18, r28
    1212:	41 15       	cp	r20, r1
    1214:	51 05       	cpc	r21, r1
    1216:	f1 f0       	breq	.+60     	; 0x1254 <free+0x92>
    1218:	ea 01       	movw	r28, r20
    121a:	f5 cf       	rjmp	.-22     	; 0x1206 <free+0x44>
    121c:	d3 83       	std	Z+3, r29	; 0x03
    121e:	c2 83       	std	Z+2, r28	; 0x02
    1220:	40 81       	ld	r20, Z
    1222:	51 81       	ldd	r21, Z+1	; 0x01
    1224:	84 0f       	add	r24, r20
    1226:	95 1f       	adc	r25, r21
    1228:	c8 17       	cp	r28, r24
    122a:	d9 07       	cpc	r29, r25
    122c:	59 f4       	brne	.+22     	; 0x1244 <free+0x82>
    122e:	88 81       	ld	r24, Y
    1230:	99 81       	ldd	r25, Y+1	; 0x01
    1232:	84 0f       	add	r24, r20
    1234:	95 1f       	adc	r25, r21
    1236:	02 96       	adiw	r24, 0x02	; 2
    1238:	91 83       	std	Z+1, r25	; 0x01
    123a:	80 83       	st	Z, r24
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	9b 81       	ldd	r25, Y+3	; 0x03
    1240:	93 83       	std	Z+3, r25	; 0x03
    1242:	82 83       	std	Z+2, r24	; 0x02
    1244:	21 15       	cp	r18, r1
    1246:	31 05       	cpc	r19, r1
    1248:	29 f4       	brne	.+10     	; 0x1254 <free+0x92>
    124a:	f0 93 5a 01 	sts	0x015A, r31	; 0x80015a <__flp+0x1>
    124e:	e0 93 59 01 	sts	0x0159, r30	; 0x800159 <__flp>
    1252:	3d c0       	rjmp	.+122    	; 0x12ce <free+0x10c>
    1254:	e9 01       	movw	r28, r18
    1256:	fb 83       	std	Y+3, r31	; 0x03
    1258:	ea 83       	std	Y+2, r30	; 0x02
    125a:	49 91       	ld	r20, Y+
    125c:	59 91       	ld	r21, Y+
    125e:	c4 0f       	add	r28, r20
    1260:	d5 1f       	adc	r29, r21
    1262:	ec 17       	cp	r30, r28
    1264:	fd 07       	cpc	r31, r29
    1266:	61 f4       	brne	.+24     	; 0x1280 <free+0xbe>
    1268:	80 81       	ld	r24, Z
    126a:	91 81       	ldd	r25, Z+1	; 0x01
    126c:	84 0f       	add	r24, r20
    126e:	95 1f       	adc	r25, r21
    1270:	02 96       	adiw	r24, 0x02	; 2
    1272:	e9 01       	movw	r28, r18
    1274:	99 83       	std	Y+1, r25	; 0x01
    1276:	88 83       	st	Y, r24
    1278:	82 81       	ldd	r24, Z+2	; 0x02
    127a:	93 81       	ldd	r25, Z+3	; 0x03
    127c:	9b 83       	std	Y+3, r25	; 0x03
    127e:	8a 83       	std	Y+2, r24	; 0x02
    1280:	e0 e0       	ldi	r30, 0x00	; 0
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	12 96       	adiw	r26, 0x02	; 2
    1286:	8d 91       	ld	r24, X+
    1288:	9c 91       	ld	r25, X
    128a:	13 97       	sbiw	r26, 0x03	; 3
    128c:	00 97       	sbiw	r24, 0x00	; 0
    128e:	19 f0       	breq	.+6      	; 0x1296 <free+0xd4>
    1290:	fd 01       	movw	r30, r26
    1292:	dc 01       	movw	r26, r24
    1294:	f7 cf       	rjmp	.-18     	; 0x1284 <free+0xc2>
    1296:	8d 91       	ld	r24, X+
    1298:	9c 91       	ld	r25, X
    129a:	11 97       	sbiw	r26, 0x01	; 1
    129c:	9d 01       	movw	r18, r26
    129e:	2e 5f       	subi	r18, 0xFE	; 254
    12a0:	3f 4f       	sbci	r19, 0xFF	; 255
    12a2:	82 0f       	add	r24, r18
    12a4:	93 1f       	adc	r25, r19
    12a6:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <__brkval>
    12aa:	30 91 58 01 	lds	r19, 0x0158	; 0x800158 <__brkval+0x1>
    12ae:	28 17       	cp	r18, r24
    12b0:	39 07       	cpc	r19, r25
    12b2:	69 f4       	brne	.+26     	; 0x12ce <free+0x10c>
    12b4:	30 97       	sbiw	r30, 0x00	; 0
    12b6:	29 f4       	brne	.+10     	; 0x12c2 <free+0x100>
    12b8:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <__flp+0x1>
    12bc:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <__flp>
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <free+0x104>
    12c2:	13 82       	std	Z+3, r1	; 0x03
    12c4:	12 82       	std	Z+2, r1	; 0x02
    12c6:	b0 93 58 01 	sts	0x0158, r27	; 0x800158 <__brkval+0x1>
    12ca:	a0 93 57 01 	sts	0x0157, r26	; 0x800157 <__brkval>
    12ce:	df 91       	pop	r29
    12d0:	cf 91       	pop	r28
    12d2:	08 95       	ret

000012d4 <_exit>:
    12d4:	f8 94       	cli

000012d6 <__stop_program>:
    12d6:	ff cf       	rjmp	.-2      	; 0x12d6 <__stop_program>
